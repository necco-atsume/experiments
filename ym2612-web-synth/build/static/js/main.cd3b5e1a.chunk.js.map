{"version":3,"sources":["presets.ts","synth.ts","ym2612.js","useSynth.tsx","SynthComponent.tsx","PianoRoll.tsx","App.tsx","index.js"],"names":["Presets","fms","ams","fb","alg","operators","one","tl","am","a","d","s","d2","r","mult","dt","rs","two","three","four","applyPreset","context","patch","updateChannel","c","PhaseModulationSensitivity","set","AmplitudeModulationSensitivity","Feedback","Algorithm","updateOperator","op","FmEnable","Attack","Decay","Sustain","Release","SustainLevel","Level","Multiple","Detune","Scaling","ssg","CustomEnvelopeEnable","CustomEnvelope","Operator1","Operator2","Operator3","Operator4","ChannelOne","ChannelTwo","ChannelThree","ChannelFour","ChannelFive","ChannelSix","MappedFlag","_chip","_addr","_bit","defaultValue","this","value","read","bit","test","oldValue","newValue","bitStatus","mask","setBit","console","log","toString","write","range","start","end","MappedNumber","lsbOrByte","msb","lsb","address","writeRegion","loc","val","n","toReplace","Math","pow","writeMask","invMask","combined","shifted","Operator","_offset","Channel","_channel","Frequency","Octave","Left","Right","operatorBase","SynthContext","chip","notifyUpdate","LfoEnable","LfoFreq","TimerAFrequency","TimerBFrequency","TimerALoad","TimerBLoad","TimerAEnable","TimerBEnable","TimerARst","TimerBRst","Channel3Mode","OperatorS1Enable","OperatorS2Enable","OperatorS3Enable","OperatorS4Enable","DacOutput","DacEnable","prev","bind","v","includes","init","config","reset","YM2612","clock","rate","cfg","debug","ST","YMX","ratio","interval","mode","count","ym","CH","length","i","x","o","m","q","z","PI","LOG","POW","SIN","sin","tmp","_ENV","STEP","sh","rl2","_TL","RES_LEN","tab","_SIN","LEN","_YM","LFO","pm_output","pm_table","init_tables","OPN","SetPrescaler","eg","timer","cnt","lfo","timer_overflow","AM","PM","TAC","TBC","SL3","key_csm","dacen","dacout","set_timers","TB","TA","TBL","TIMER_SH","TAL","num","reset_channels","WriteReg","buffer","addr","WriteMode","readStatus","status","update","len","j","lt","rt","dis_csm","buf","is_csm","canCSM","SLOT","_SLOT","Incr","refresh_fc_eg","fc","kcode","debugArr","didDac","step","CL","outputs","out","update_ssg_eg","canDAC","calculate","muted","pan","keyOffCSM","advance_lfo","timer_add","advance_eg_channels","INTERNAL_TIMER_A","timer_base","join","bits","bitmask","BITS","toggle","ch","load","state","save","version","hq_fm","dac_bits","maxcalc","debugLocal","strict","FREQ_MASK","FREQ_SH","MAX_ATT_INDEX","_EG","_DT","MASK","TAB_LEN","Array","QUIET","sl","SC","db","RATE_STEPS","inc","rate_select","O","rate_shift","CHAN","N","op_calc","FM_SLOT","_eg","ar","d1r","d2r","rr","DT","KSR","ksr","mul","phase","volume","vol_out","sel","ssgn","key","AMmask","OFF","dt1","ks","FM_CH","ALGO","FB","op1_out","connect","mem","pms","block_fnum","fn_h","FM_ST","dt_tab","FM_3SLOT","FM_OPN","_timer","fn","fill","keyControlCSM","_upd","eg_cnt","advance_eg","prototype","keyOn","csm","MIN_ATT_INDEX","SUS","DEC","ATT","keyOff","REL","keyOnCSM","setupConnection","carrier","Error","set_det_mul","dt1mul","set_tl","set_ar_ksr","ksar","old_ksr","set_dr","amd1r","set_sr","set_sl_rr","slrr","update_phase_lfo","off","blk","kc","fktable","table","max","update_phase_lfo_precalc","finc","calcVol","env","pm","p","inp","asFB","eg_out","msg","msg_out","outs","m2","c1","c2","samples_per_step","LFO_SH","S","ams_depth_shift","scale","EG_SH","useSynth","synth","React","initializeSynthContext","processor","createScriptProcessor","onaudioprocess","e","outputBuffer","sample","copyToChannel","Float32Array","map","destination","disconnect","close","initializeWebAudioContext","AudioContext","maxValue","SynthComponent","props","Number","boundSynth","id","name","size","field","get","min","onChange","_","Flag","isChecked","target","checked","OperatorFields","operatorSelector","operator","direction","PianoRoll","octave","setOctave","press","f","release","note","onMouseDown","onMouseUp","colorScheme","onClick","App","synthWrites","setSynthWrites","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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AK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAGpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAGpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GAGpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,EAAK,GACpC,CAAC,EAAK,E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","file":"static/js/main.cd3b5e1a.chunk.js","sourcesContent":["import SynthContext, { Channel, Operator } from \"./synth\";\r\n\r\nexport const applyPianoPreset = (synth: SynthContext) => {\r\n    synth.LfoEnable.set(false);\r\n    synth.Channel3Mode.set(0);\r\n    synth.Channel.set(0);\r\n    synth.DacEnable.set(false);\r\n  \r\n    synth.ChannelOne.Operator1.Detune.set(0x07);\r\n    synth.ChannelOne.Operator3.Detune.set(0x00);\r\n    synth.ChannelOne.Operator2.Detune.set(0x03);\r\n    synth.ChannelOne.Operator4.Detune.set(0x00);\r\n  \r\n    synth.ChannelOne.Operator1.Multiple.set(0x01);\r\n    synth.ChannelOne.Operator3.Multiple.set(0x0d);\r\n    synth.ChannelOne.Operator2.Multiple.set(0x03);\r\n    synth.ChannelOne.Operator4.Multiple.set(0x01);\r\n    \r\n    synth.ChannelOne.Operator1.Level.set(0x23);\r\n    synth.ChannelOne.Operator3.Level.set(0x2D);\r\n    synth.ChannelOne.Operator2.Level.set(0x26);\r\n    synth.ChannelOne.Operator4.Level.set(0x00);\r\n  \r\n    synth.ChannelOne.Operator1.Attack.set(0x1F);\r\n    synth.ChannelOne.Operator3.Attack.set(0x19);\r\n    synth.ChannelOne.Operator2.Attack.set(0x1F);\r\n    synth.ChannelOne.Operator4.Attack.set(0x14);\r\n  \r\n    synth.ChannelOne.Operator1.Scaling.set(0x01);\r\n    synth.ChannelOne.Operator3.Scaling.set(0x02);\r\n    synth.ChannelOne.Operator2.Scaling.set(0x01);\r\n    synth.ChannelOne.Operator4.Scaling.set(0x02);\r\n  \r\n    synth.ChannelOne.Operator1.Decay.set(0x05);\r\n    synth.ChannelOne.Operator3.Decay.set(0x05);\r\n    synth.ChannelOne.Operator2.Decay.set(0x05);\r\n    synth.ChannelOne.Operator4.Decay.set(0x07);\r\n  \r\n    synth.ChannelOne.Operator1.Sustain.set(0x02);\r\n    synth.ChannelOne.Operator3.Sustain.set(0x02);\r\n    synth.ChannelOne.Operator2.Sustain.set(0x02);\r\n    synth.ChannelOne.Operator4.Sustain.set(0x02);\r\n  \r\n    synth.ChannelOne.Operator1.Release.set(0x01);\r\n    synth.ChannelOne.Operator3.Release.set(0x01);\r\n    synth.ChannelOne.Operator2.Release.set(0x01);\r\n    synth.ChannelOne.Operator4.Release.set(0x06);\r\n  \r\n    synth.ChannelOne.Operator1.SustainLevel.set(0x01);\r\n    synth.ChannelOne.Operator3.SustainLevel.set(0x01);\r\n    synth.ChannelOne.Operator2.SustainLevel.set(0x01);\r\n    synth.ChannelOne.Operator4.SustainLevel.set(0x0A); \r\n  \r\n    synth.Channel.set(0x00); \r\n    synth.ChannelOne.Feedback.set(0b110);\r\n    synth.ChannelOne.Algorithm.set(0b010);\r\n    synth.ChannelOne.Left.set(true);\r\n    synth.ChannelOne.Right.set(true);\r\n  \r\n    synth.ChannelOne.Octave.set(0b0100);\r\n    synth.ChannelOne.Frequency.set(0b010_0110_1001);\r\n  \r\n    synth.Channel.set(0x00); \r\n};\r\n\r\ntype OperatorSettings = {\r\n    am: boolean;\r\n    tl: number;\r\n    a: number;\r\n    d: number;\r\n    s: number;\r\n    d2: number;\r\n    r: number;\r\n    mult: number;  \r\n    rs: number;\r\n    dt: number; \r\n    ssg?: number;\r\n};\r\n\r\ntype PatchSettings = {\r\n    fms: number,\r\n    ams: number,\r\n    fb: number,\r\n    alg: number,\r\n    operators: {\r\n        // TODO: Allow disable here.\r\n        one: OperatorSettings,\r\n        two: OperatorSettings,\r\n        three: OperatorSettings,\r\n        four: OperatorSettings,\r\n    }\r\n};\r\n\r\nexport const Presets: { [key: string]: PatchSettings } = {\r\n    // Copied from Deflemask 'green hill zone' demo arrangement.\r\n    marbleBass: {\r\n        fms: 0,\r\n        ams: 0,\r\n        fb: 4,\r\n        alg: 0,\r\n        operators: {\r\n            one: {\r\n                tl: 25,\r\n                am: false,\r\n                a: 31,\r\n                d: 7,\r\n                s: 2,\r\n                d2: 7,\r\n                r: 0,\r\n                mult: 6,\r\n                dt: 3,\r\n                rs: 3,\r\n            },\r\n            two: {\r\n                tl: 55,\r\n                am: false,\r\n                a: 31, \r\n                d: 6, \r\n                s: 1, \r\n                d2: 6, \r\n                r: 0, \r\n                mult: 5,\r\n                rs: 3,\r\n                dt: 3,\r\n            },\r\n            three: {\r\n                tl: 19,\r\n                am: false,\r\n                a: 31,\r\n                d: 9,\r\n                s: 1,\r\n                d2: 6,\r\n                r: 0,\r\n                mult: 0,\r\n                rs: 2,\r\n                dt: 3,\r\n            },\r\n            four: {\r\n                tl: 11,\r\n                am: false,\r\n                a: 31,\r\n                d: 6,\r\n                s: 15,\r\n                d2: 8,\r\n                r: 8,\r\n                mult: 1,\r\n                rs: 2,\r\n                dt: 3\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport const applyPresetFromJson = (json: string, context: SynthContext) => {\r\n    const patch = JSON.parse(json) as PatchSettings;\r\n\r\n    // FIXME: Repliacate for each channel.\r\n    applyPreset(context)(patch);\r\n}\r\n\r\nexport const applyPreset = (context: SynthContext) => (patch: PatchSettings) => {\r\n    const updateChannel = (c: Channel) => {\r\n        c.PhaseModulationSensitivity.set(patch.fms);\r\n        c.AmplitudeModulationSensitivity.set(patch.ams);\r\n        c.Feedback.set(patch.fb);\r\n        c.Algorithm.set(patch.alg);\r\n\r\n        const updateOperator = (op: Operator, s: OperatorSettings) => {\r\n            op.FmEnable.set(!s.am);\r\n            op.Attack.set(s.a);\r\n            op.Decay.set(s.d);\r\n            op.Sustain.set(s.s);\r\n            op.Release.set(s.r);\r\n            op.SustainLevel.set(s.d2);\r\n            op.Level.set(s.tl);\r\n            op.Multiple.set(s.mult);\r\n            op.Detune.set(s.dt);\r\n            op.Scaling.set(s.rs);\r\n\r\n            if (s.ssg != null) {\r\n                op.CustomEnvelopeEnable.set(true);\r\n                op.CustomEnvelope.set(s.ssg);\r\n            } else {\r\n                op.CustomEnvelopeEnable.set(false);\r\n            }\r\n        }\r\n\r\n        updateOperator(c.Operator1, patch.operators.one);\r\n        updateOperator(c.Operator2, patch.operators.two);\r\n        updateOperator(c.Operator3, patch.operators.three);\r\n        updateOperator(c.Operator4, patch.operators.four);\r\n    }\r\n\r\n    updateChannel(context.ChannelOne);\r\n    updateChannel(context.ChannelTwo);\r\n    updateChannel(context.ChannelThree);\r\n    updateChannel(context.ChannelFour);\r\n    updateChannel(context.ChannelFive);\r\n    updateChannel(context.ChannelSix);\r\n};","import YM2612 from \"./ym2612\";\r\n\r\nconst CLOCK_RATE_HZ = 7670448;\r\nconst SAMPLE_RATE_HZ = 44100;\r\nconst DAC_PRECISION_BITS = 9;\r\n\r\ninterface ReadWriteable {\r\n    read: (address: number) => number;\r\n    write: (address: number, value: number) => void;\r\n\r\n};\r\n\r\ninterface MappedValue<T> {\r\n    get(): T;\r\n    set(value: T): void;\r\n    bits: () => number;\r\n};\r\n\r\ntype Bit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7;\r\n\r\n/** Test whether a given bit is set in a value. */ \r\nconst test = (bit: Bit, value: number) => ((0x01 << bit) & value) !== 0;\r\n/** Sets a bit in a given value to on or off. */\r\nconst setBit = (bit: Bit, value: number, bitStatus: boolean) => {\r\n    const  mask = 0x01 << bit;\r\n\r\n    if (!bitStatus) {\r\n        // Flip the bit off.\r\n        const invMask = ~mask & 0xFF;\r\n        return value & invMask;\r\n    } else {\r\n        return value | mask;\r\n    }\r\n\r\n};\r\n\r\n/** JS wrapper over a flag in the YM2612's memory map. */\r\nexport class MappedFlag implements MappedValue<boolean> {\r\n\r\n    constructor(private readonly _chip: ReadWriteable, private readonly _addr: number, private readonly _bit: Bit, defaultValue?: boolean) {\r\n        if (defaultValue != null) {\r\n            this.set(defaultValue);\r\n        }\r\n    }\r\n\r\n    bits(): number {\r\n        return 1;\r\n    }\r\n\r\n    get(): boolean {\r\n        const value = this._chip.read(this._addr);\r\n        return test(this._bit, value);\r\n    }\r\n    set(value: boolean): void {\r\n        const oldValue = this._chip.read(this._addr);\r\n        const newValue = setBit(this._bit, oldValue, value);\r\n        console.log(`writing 0x${newValue.toString(16)} to 0x${this._addr.toString(16)}`);\r\n        this._chip.write(this._addr, newValue);\r\n    }\r\n}\r\n\r\ninterface Location {\r\n    address: number;\r\n    start: Bit;\r\n    end: Bit;\r\n}\r\n\r\nconst mask = (range: Location): number => {\r\n    const { start, end } = range;\r\n    return ((((0 >= start) && (0 <= end)) ? 0x01 : 0)\r\n          | (((1 >= start) && (1 <= end)) ? 0x02 : 0)\r\n          | (((2 >= start) && (2 <= end)) ? 0x04 : 0)\r\n          | (((3 >= start) && (3 <= end)) ? 0x08 : 0)\r\n          | (((4 >= start) && (4 <= end)) ? 0x10 : 0)\r\n          | (((5 >= start) && (5 <= end)) ? 0x20 : 0)\r\n          | (((6 >= start) && (6 <= end)) ? 0x40 : 0)\r\n          | (((7 >= start) && (7 <= end)) ? 0x80 : 0));\r\n}\r\n\r\nconst invMask = (range : Location): number => {\r\n    const { start, end } = range;\r\n    return ((((0 >= start) && (0 <= end)) ? 0 : 0x01)\r\n          | (((1 >= start) && (1 <= end)) ? 0 : 0x02)\r\n          | (((2 >= start) && (2 <= end)) ? 0 : 0x04)\r\n          | (((3 >= start) && (3 <= end)) ? 0 : 0x08)\r\n          | (((4 >= start) && (4 <= end)) ? 0 : 0x10)\r\n          | (((5 >= start) && (5 <= end)) ? 0 : 0x20)\r\n          | (((6 >= start) && (6 <= end)) ? 0 : 0x40)\r\n          | (((7 >= start) && (7 <= end)) ? 0 : 0x80));\r\n}\r\n\r\nconst bits = (n: number) => Math.pow(2, n) - 1;\r\n\r\n/** Generic wrapper over a number in the YM2612's memory map. These can optionally span multiple bytes. */\r\nexport class MappedNumber implements MappedValue<number> {\r\n    constructor(private readonly _chip: ReadWriteable, private readonly lsbOrByte: Location, private readonly msb?: Location, defaultValue?: number) {\r\n        if (defaultValue != null) {\r\n            this.set(defaultValue);\r\n        }\r\n    }\r\n\r\n    bits(): number {\r\n        const lo = this.lsbOrByte.end - this.lsbOrByte.start + 1;\r\n        const hi = (this.msb != null) ? this.msb.end - this.msb.start + 1: 0;\r\n        return lo + hi;\r\n    }\r\n\r\n    get(): number {\r\n        // Read out the int value\r\n        const lsb = ((mask(this.lsbOrByte) & this._chip.read(this.lsbOrByte.address)) >> this.lsbOrByte.start) & 0xFF;\r\n\r\n        // If it spans two addresses combine them.\r\n        let msb = 0;\r\n        if (this.msb != null) {\r\n            // eslint-disable-next-line\r\n            msb = ((mask(this.msb) & this._chip.read(this.msb.address))  >> this.msb.start & 0xFF);\r\n            // Shift it out so we can OR these two together and get the 'actual' value.\r\n            msb = msb << (1 + this.lsbOrByte.end - this.lsbOrByte.start);\r\n        }\r\n\r\n        return msb | lsb;\r\n    }\r\n    set(value: number): void {\r\n        const writeRegion = (loc: Location, val: number) => {\r\n            // First prepare the bits to write, and shift them into place relative to tbe byte they'll be written into.\r\n            // (We assume that it's pre-shifted so the bits in `loc` are correct.)\r\n            const valueMask = bits(loc.end - loc.start + 1);\r\n            const toReplace = (val & valueMask) << loc.start;\r\n\r\n            // Now grab the old value. We only want to overwrite the bits that are mapped, so we'll need to combine the two.\r\n            const writeMask = invMask(loc);\r\n            const prev = (this._chip.read(loc.address)) & writeMask;\r\n\r\n            // Finally combine and write it out.\r\n            const combined = prev | toReplace;\r\n            this._chip.write(loc.address, combined);\r\n        }\r\n\r\n        if (this.msb != null && this.msb.address < this.lsbOrByte.address) { \r\n            writeRegion(this.lsbOrByte, value);\r\n        }\r\n\r\n        if (this.msb != null) {\r\n\r\n            // Shift the lsb out, so we're only looking at the msb.\r\n            // Note: Watch for negatives here. We can rely on this bc the ym2612 doesn't use any, but mask out the sign bit anyways.\r\n            const lsbSize = this.lsbOrByte.end - this.lsbOrByte.start + 1;\r\n            const shifted = (value & 0x7FFF_FFFF) >> lsbSize; \r\n\r\n            writeRegion(this.msb, shifted);\r\n        }\r\n\r\n        if (this.msb == null || this.msb.address > this.lsbOrByte.address) { \r\n            writeRegion(this.lsbOrByte, value);\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n\r\n    Level: MappedNumber;\r\n    Attack: MappedNumber;\r\n    Decay: MappedNumber;\r\n    Sustain: MappedNumber;\r\n    Release: MappedNumber;\r\n\r\n    Scaling: MappedNumber;\r\n    SustainLevel: MappedNumber;\r\n\r\n    Detune: MappedNumber;\r\n    Multiple: MappedNumber;\r\n    FmEnable: MappedFlag;\r\n\r\n    // Aka. SSG-EG.\r\n    CustomEnvelope: MappedNumber;\r\n    CustomEnvelopeEnable: MappedFlag;\r\n\r\n    constructor(private readonly _chip: YM2612, private readonly _offset: number) {\r\n        this.Detune = new MappedNumber(_chip, { address: 0x30 + _offset, start: 4, end: 6});\r\n        this.Multiple = new MappedNumber(_chip, { address: 0x30 + _offset, start: 0, end: 3});\r\n        this.Level = new MappedNumber(_chip, { address: 0x40 + _offset, start: 0, end: 6 });\r\n        this.Scaling = new MappedNumber(_chip, { address: 0x50 + _offset, start: 6, end: 7 });\r\n        this.FmEnable = new MappedFlag(_chip, 0x60 + _offset, 7);\r\n\r\n        this.Attack = new MappedNumber(_chip, { address: 0x50 + _offset, start: 0, end: 4 });\r\n        this.Decay = new MappedNumber(_chip, { address: 0x60 + _offset, start: 0, end: 4 });\r\n        this.Sustain = new MappedNumber(_chip, { address: 0x70 + _offset, start: 0, end: 4 });\r\n        this.Release = new MappedNumber(_chip, { address: 0x80 + _offset, start: 0, end: 3 });\r\n\r\n        this.SustainLevel = new MappedNumber(_chip, { address: 0x80 + _offset, start: 4, end: 7 });\r\n\r\n        this.CustomEnvelope = new MappedNumber(_chip, { address: 0x90 + _offset, start: 0, end: 2 });\r\n        this.CustomEnvelopeEnable = new MappedFlag(_chip, 0x90 + _offset, 3);\r\n    }\r\n\r\n}\r\n\r\nexport class Channel {\r\n\r\n    public Operator1: Operator;\r\n    public Operator2: Operator;\r\n    public Operator3: Operator;\r\n    public Operator4: Operator;\r\n\r\n    public Frequency: MappedNumber;\r\n    public Octave: MappedNumber;\r\n\r\n    public Algorithm: MappedNumber;\r\n    public Feedback: MappedNumber;\r\n\r\n    public Left: MappedFlag;\r\n    public Right: MappedFlag;\r\n\r\n    public AmplitudeModulationSensitivity: MappedNumber;\r\n    public PhaseModulationSensitivity: MappedNumber;\r\n\r\n    \r\n    constructor(private readonly _chip: YM2612, private readonly _channel: number) {\r\n        const operatorBase = (_channel < 4) ? (_channel - 1) : ((_channel - 1) | 0x100);\r\n\r\n        this.Operator1 = new Operator(_chip, operatorBase);\r\n        this.Operator2 = new Operator(_chip, operatorBase + 0x8);\r\n        this.Operator3 = new Operator(_chip, operatorBase + 0x4);\r\n        this.Operator4 = new Operator(_chip, operatorBase + 0xC);\r\n\r\n        this.Frequency = new MappedNumber(_chip, \r\n            { address: 0xA0 + operatorBase, start: 0, end: 7 },\r\n            { address: 0xA0 + operatorBase + 4, start: 0, end: 2 });\r\n\r\n        this.Octave = new MappedNumber(_chip,\r\n            { address: 0xA0 + operatorBase + 4, start: 3, end: 5 });\r\n\r\n        this.Algorithm = new MappedNumber(_chip,\r\n            { address: 0xB0 + operatorBase, start: 0, end: 2 });\r\n\r\n        this.Feedback = new MappedNumber(_chip,\r\n            { address: 0xB0 + operatorBase, start: 3, end: 5 });\r\n\r\n        this.Left = new MappedFlag(_chip, 0xB4 + operatorBase, 7);\r\n        this.Right = new MappedFlag(_chip, 0xB4 + operatorBase, 6);\r\n\r\n        this.AmplitudeModulationSensitivity = new MappedNumber(_chip, { address: 0xB4 + operatorBase, start: 4, end: 5 });\r\n        this.PhaseModulationSensitivity = new MappedNumber(_chip, { address: 0xB4 + operatorBase, start: 0, end: 2 });\r\n    }\r\n}\r\nexport default class SynthContext {\r\n    // TODO: This is weird, fix it.\r\n    chip: YM2612;\r\n\r\n    LfoEnable: MappedFlag;\r\n    LfoFreq: MappedNumber;\r\n    TimerAFrequency: MappedNumber;\r\n    TimerBFrequency: MappedNumber;\r\n    TimerALoad: MappedFlag;\r\n    TimerBLoad: MappedFlag;\r\n    TimerAEnable: MappedFlag;\r\n    TimerBEnable: MappedFlag;\r\n    TimerARst: MappedFlag;\r\n    TimerBRst: MappedFlag;\r\n\r\n    // TODO: Allow disabling polyphony and using the special channel 3 mode.\r\n    Channel3Mode: MappedNumber;\r\n\r\n    Channel: MappedNumber;\r\n\r\n    OperatorS1Enable: MappedFlag;\r\n    OperatorS2Enable: MappedFlag;\r\n    OperatorS3Enable: MappedFlag;\r\n    OperatorS4Enable: MappedFlag;\r\n\r\n    DacOutput: MappedNumber;\r\n\r\n    DacEnable: MappedFlag;\r\n\r\n    ChannelOne: Channel;\r\n    ChannelTwo: Channel;\r\n    ChannelThree: Channel;\r\n    ChannelFour: Channel;\r\n    ChannelFive: Channel;\r\n    ChannelSix: Channel;\r\n\r\n    constructor(chip: YM2612, notifyUpdate: () => void) {\r\n        this.chip = chip;\r\n\r\n        // HACK: Monkeypatch write()  here so we can force an update every time a value changes.\r\n        // TOOD: Do this cleanly..\r\n\r\n        const prev = this.chip.write.bind(this.chip);\r\n        this.chip.write = (a, v) => {\r\n            if (this.chip.read(a) !== v && ![0x28, 0xa0, 0xa4].includes(a)) {\r\n                notifyUpdate();\r\n            }\r\n            prev(a, v);\r\n        };\r\n\r\n        this.LfoEnable = new MappedFlag(this.chip, 0x22, 3);\r\n        this.LfoFreq = new MappedNumber(this.chip, { address: 0x22, start: 0, end: 2 });\r\n\r\n        this.TimerAFrequency = new MappedNumber(this.chip, { address: 0x25, start: 0, end: 1 }, { address: 0x24, start: 0, end: 7 });\r\n        this.TimerBFrequency = new MappedNumber(this.chip, { address: 0x26, start: 0, end: 7 });\r\n\r\n        this.TimerALoad = new MappedFlag(this.chip, 0x27, 0);\r\n        this.TimerBLoad = new MappedFlag(this.chip, 0x27, 1);\r\n        this.TimerAEnable = new MappedFlag(this.chip, 0x27, 2);\r\n        this.TimerBEnable = new MappedFlag(this.chip, 0x27, 3);\r\n        this.TimerARst = new MappedFlag(this.chip, 0x27, 4);\r\n        this.TimerBRst = new MappedFlag(this.chip, 0x27, 5);\r\n\r\n        this.Channel3Mode = new MappedNumber(this.chip, { address: 0x27, start: 6, end: 7 });\r\n\r\n        this.Channel = new MappedNumber(this.chip, { address: 0x28, start: 0, end: 7 });\r\n\r\n        this.OperatorS1Enable = new MappedFlag(this.chip, 0x28, 4);\r\n        this.OperatorS2Enable = new MappedFlag(this.chip, 0x28, 5);\r\n        this.OperatorS3Enable = new MappedFlag(this.chip, 0x28, 6);\r\n        this.OperatorS4Enable = new MappedFlag(this.chip, 0x28, 7);\r\n\r\n        this.DacOutput = new MappedNumber(this.chip, { address: 0x2A, start: 0, end: 7 });\r\n\r\n        this.DacEnable = new MappedFlag(this.chip, 0x2B, 7);\r\n\r\n        this.ChannelOne = new Channel(chip, 1);\r\n        this.ChannelTwo = new Channel(chip, 2);\r\n        this.ChannelThree = new Channel(chip, 3);\r\n        this.ChannelFour = new Channel(chip, 4);\r\n        this.ChannelFive = new Channel(chip, 5);\r\n        this.ChannelSix = new Channel(chip, 6);\r\n\r\n        // TODO: Support Special Channel3 Mode.\r\n        // Since this is just used as a synth, every channel should have the same voices.\r\n        chip.init(CLOCK_RATE_HZ, SAMPLE_RATE_HZ);\r\n        chip.config(DAC_PRECISION_BITS);\r\n        chip.reset();\r\n        chip.write(0x28, 0);\r\n    }\r\n\r\n\r\n}\r\n","/* eslint-disable no-sequences */\n/* eslint-disable no-unused-vars */\n/* eslint-disable default-case */\n/* eslint-disable no-unused-expressions */\n\n/**** YM2612 API based on genplus-gx ****/\nclass YM2612 {\n\tconstructor() {\n\t\tif (!this instanceof YM2612)\n\t\t\treturn new YM2612();\n\t\tthis.version = 0x101;\n\t\tthis.start = 0;\n\t\tthis.count = 0;\n\t\tthis.chip = null;\n\t}\n\t/* initialize ym2612 emulator */\n\tinit = function(clock,rate) {\n\t\tif (cfg.debug) console.log(\"OPN::init(\"+clock+','+rate+\")\");\n\t\tif (!this.chip) this.chip = new YMX(clock, rate);\n\t\telse this.chip.ST.clock = clock||7670448, this.chip.ST.rate = rate||44100;\n\t\tthis.ratio = 144;\t/* chip is running a VCLK / 144 = MCLK / 7 / 144 */\n\t\tthis.interval = cfg.mode;\n\t\tthis.start = 0;\n\t\tthis.count = 0;\n\t\tinit_tables(this.chip);\n\t};\n\t/* reset OPN registers */\n\treset = function() {\n\t\tif (cfg.debug) console.log(\"OPN::reset\");\n\t\t(function(x){\n\t\t\tvar i;\n\t\t\tOPN.SetPrescaler(x, 144);\t/* YM2612 prescaler is fixed to 1/6, one sample (6 mixed channels) is output for each 24 FM clocks */\n\t\t\tx.OPN.eg.timer = 0;\n\t\t\tx.OPN.eg.cnt = 0;\n\t\t\tx.OPN.lfo.timer_overflow = 0;\n\t\t\tx.OPN.lfo.timer = 0;\n\t\t\tx.OPN.lfo.cnt = 0;\n\t\t\tx.OPN.lfo.AM = 126;\n\t\t\tx.OPN.lfo.PM = 0;\n\t\t\tx.OPN.ST.TAC = 0;\n\t\t\tx.OPN.ST.TBC = 0;\n\t\t\tx.OPN.SL3.key_csm = 0;\n\t\t\tx.dacen = 0;\n\t\t\tx.dacout = 0;\n\t\t\tset_timers(x, 0x30);\n\t\t\tx.OPN.ST.TB = 0;\n\t\t\tx.OPN.ST.TA = 0;\n\t\t\tif (cfg.mode) {\t// vb\n\t\t\t\tx.OPN.ST.TBL = 256<<(_YM.TIMER_SH+4);\n\t\t\t\tx.OPN.ST.TAL = 1024<<(_YM.TIMER_SH);\n\t\t\t}\n\t\t\telse {\t// gpgx\n\t\t\t\tx.OPN.ST.TBL = 256<<4;\n\t\t\t\tx.OPN.ST.TAL = 1024;\n\t\t\t}\n\t\t\treset_channels(x, 6);\n\t\t\t//for (i=0; i<6; ++i) {if (i!=0) x.CH[i].muted = 1;}\n\t\t\ti = 0xb6; while (i>=0xb4) {\n\t\t\t\tif ((i&3)!==3)\n\t\t\t\t\tOPN.WriteReg(x, i, 0xc0),\n\t\t\t\t\tOPN.WriteReg(x, i|0x100, 0xc0);\n\t\t\t\t--i;\n\t\t\t}\n\t\t\ti = 0xb2; while (i>=30) {\n\t\t\t\tif ((i&3)!==3)\n\t\t\t\t\tOPN.WriteReg(x, i, 0),\n\t\t\t\t\tOPN.WriteReg(x, i|0x100, 0);\n\t\t\t\t--i;\n\t\t\t}\n\t\t})(this.chip);\n\t\tthis.start = 0;\n\t\tthis.count = 0;\n\t};\n\t/* ym2612 write */\n\twrite = function(a,v) {\n\t\tthis.chip.buffer[a] = v;\n\t\tif (cfg.debug>1) console.log(\"OPN::write\",a.toString(16),v.toString(16));\n\t\tv &= 0xff;\t/* adjust to 8 bit bus */\n\t\tthis.chip.OPN.ST.address = a&0x1ff;\n\t\t//switch (a) {\n\t\t//\tcase 0:\t/* address port 0 */\n\t\t//\t\tthis.chip.OPN.ST.address = v;\n\t\t//\t\tbreak;\n\t\t//\tcase 2:\t/* address port 1 */\n\t\t//\t\tthis.chip.OPN.ST.address = v|0x100;\n\t\t//\t\tbreak;\n\t\t//\tdefault:\t/* data port */\n\t\t\t\tvar addr = this.chip.OPN.ST.address;\t/* verified by Nemesis on real YM2612 */\n\t\t\t\tswitch (addr&0x1f0) {\n\t\t\t\t\tcase 0x20:\t/* 0x20-0x2f Mode */\n\t\t\t\t\t\tswitch (addr) {\n\t\t\t\t\t\t\tcase 0x2a:\t/* DAC data (ym2612) */\n\t\t\t\t\t\t\t\tthis.chip.dacout = ((v-0x80)|0)<<6;\t/* convert to 14-bit output */\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 0x2b:\t/* DAC Sel  (ym2612) */\n\t\t\t\t\t\t\t\tthis.chip.dacen = !!(v&0x80);\t/* b7 = dac enable */\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\t/* OPN section */\n\t\t\t\t\t\t\t\tOPN.WriteMode(this.chip, addr, v);\t/* write register */\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\t/* 0x30-0xff OPN section */\n\t\t\t\t\t\tOPN.WriteReg(this.chip, addr, v);\t/* write register */\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//break;\n\t\t//}\n\t};\n\n\treadStatus = function() {\n\t\treturn this.chip.OPN.ST.status&0xff;\n\t}\n\n\tread = function(address){\n\t\treturn this.chip.buffer[address] ?? 0;\n\t};\n\n\t/* Generate samples for ym2612 */\n\tupdate = function(len) {\n\t\t//// update length is given in samples\n\t\t//// but needs to calculate in chip cycles,\n\t\t//// adjust afterwards +neo\n\t\tvar num = len*this.ratio;\t// num cycles\n\t\tif(cfg.debug) console.log(\"==== YM::update\",\"samples=\"+len,\"cycles=\"+num);\n\t\tvar buf = [[],[]], j, lt, rt;\n\t\tvar is_csm = !!(this.chip.OPN.ST.mode&0xc0), dis_csm;\n\t\tvar i = -1; while (++i<this.chip.CH.length) {\n\t\t\tif (!is_csm) this.chip.CH[i].refresh_fc_eg(this.chip);\n\t\t\telse if (this.chip.CH[i].canCSM) {\t/* 3SLOT MODE (operator order is 0,1,3,2) */\n\t\t\t\tif (this.chip.CH[i].SLOT[_SLOT[0]].Incr===-1) {\n\t\t\t\t\tthis.chip.CH[i].SLOT[_SLOT[0]].refresh_fc_eg(this.chip, this.chip.OPN.SL3.fc[1], this.chip.OPN.SL3.kcode[1]);\n\t\t\t\t\tthis.chip.CH[i].SLOT[_SLOT[1]].refresh_fc_eg(this.chip, this.chip.OPN.SL3.fc[2], this.chip.OPN.SL3.kcode[2]);\n\t\t\t\t\tthis.chip.CH[i].SLOT[_SLOT[2]].refresh_fc_eg(this.chip, this.chip.OPN.SL3.fc[0], this.chip.OPN.SL3.kcode[0]);\n\t\t\t\t\tthis.chip.CH[i].SLOT[_SLOT[3]].refresh_fc_eg(this.chip, this.chip.CH[i].fc, this.chip.CH[i].kcode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//var msg = [];\n\t\t//var z = 1.0*this.chip.OPN.ST.scale, q = (len*z+0.5)|0;//(len*this.chip.OPN.ST.scale+0.5)|0;\t// len;\n\t\tcfg.debugArr.length = 0;\n\t\tvar didOverflow, didDac, CL = this.chip.CH.length;\n\t\t/* buffering */\n\t\ti = -1; while (++i<len) {\n\t\t\tlt = 0, rt = 0; dis_csm = !!(this.chip.OPN.SL3.key_csm&2);\n\t\t\tdidDac = false;\t// one DAC for now\n\t\t\tj = -1; while (++j<CL) {\n\t\t\t\t//if (j===0&&i<10) cfg.maxcalc = 10;\n\t\t\t\t//else cfg.maxcalc = 0;\n\t\t\t\tthis.chip.CH[j].outputs.out = 0;\t/* clear outputs */\n\t\t\t\tthis.chip.CH[j].update_ssg_eg();\t/* update SSG-EG output */\n\t\t\t\tif (this.chip.dacen&&this.chip.CH[j].canDAC&&!didDac)\n\t\t\t\t\tthis.chip.CH[j].outputs.out += this.chip.dacout, didDac = true;\t/* DAC Mode */\n\t\t\t\telse this.chip.CH[j].calculate(this.chip);\t/* calculate FM */\n\t\t\t\t//if (j===0&&(cfg.debugLocal>0)) cfg.debugArr[cfg.debugArr.length] = this.chip.CH[j].outputs.out, --cfg.debugLocal;\n\t\t\t\t/* 14-bit accumulator channels outputs (range is -8192;+8192) */\n\t\t\t\tif (this.chip.CH[j].outputs.out>8192) this.chip.CH[j].outputs.out = 8192;\n\t\t\t\telse if (this.chip.CH[j].outputs.out<-8192) this.chip.CH[j].outputs.out = -8192;\n\t\t\t\t/* stereo DAC channels outputs mixing  */\n\t\t\t\t//if (j===0) msg[i] = (this.chip.CH[j].out&this.chip.OPN.pan[(j<<1)+0]);\n\t\t\t\t//lt += this.chip.CH[j].out&this.chip.OPN.pan[(j<<1)+0];\t// old method\n\t\t\t\t//rt += this.chip.CH[j].out&this.chip.OPN.pan[(j<<1)+1];\t// old method\n\t\t\t\tif (!this.chip.CH[j].muted)\t// new method\n\t\t\t\t\tlt += (this.chip.CH[j].outputs.out&this.chip.CH[j].pan[0])|0,\n\t\t\t\t\trt += (this.chip.CH[j].outputs.out&this.chip.CH[j].pan[1])|0;\n\t\t\t\tif (dis_csm&&this.chip.CH[j].canCSM) {\t/* CSM Mode Key ON still disabled */\n\t\t\t\t\t/* CSM Mode Key OFF (verified by Nemesis on real hardware) */\n\t\t\t\t\tthis.chip.CH[j].keyOffCSM(this.chip, _SLOT[0]);\n\t\t\t\t\tthis.chip.CH[j].keyOffCSM(this.chip, _SLOT[1]);\n\t\t\t\t\tthis.chip.CH[j].keyOffCSM(this.chip, _SLOT[2]);\n\t\t\t\t\tthis.chip.CH[j].keyOffCSM(this.chip, _SLOT[3]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* advance LFO */\n\t\t\tadvance_lfo(this.chip);\n\t\t\t/* EG is updated every 3 samples */\n\t\t\tif (cfg.mode) {\t// vb\n\t\t\t\tthis.chip.OPN.eg.timer += this.chip.OPN.eg.timer_add;\t/* advance envelope generator */\n\t\t\t\twhile (this.chip.OPN.eg.timer>=this.chip.OPN.eg.timer_overflow) {\n\t\t\t\t\tthis.chip.OPN.eg.timer -= this.chip.OPN.eg.timer_overflow;\n\t\t\t\t\t++this.chip.OPN.eg.cnt;\n\t\t\t\t\tadvance_eg_channels(this.chip, this.chip.OPN.eg.cnt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\t// gpgx\n\t\t\t\t++this.chip.OPN.eg.timer;\t/* advance envelope generator */\n\t\t\t\tif (this.chip.OPN.eg.timer>=3) {\n\t\t\t\t\tthis.chip.OPN.eg.timer = 0;\n\t\t\t\t\t++this.chip.OPN.eg.cnt;\n\t\t\t\t\tadvance_eg_channels(this.chip, this.chip.OPN.eg.cnt);\n\t\t\t\t}\n\t\t\t}\n\t\t\t/* buffering */\n\t\t\tbuf[0][i] = lt;\n\t\t\tbuf[1][i] = rt;\n\t\t\t/* CSM mode: if CSM Key ON has occured, CSM Key OFF need to be sent       */\n\t\t\t/* only if Timer A does not overflow again (i.e CSM Key ON not set again) */\n\t\t\tthis.chip.OPN.SL3.key_csm <<= 1;\n\t\t\tINTERNAL_TIMER_A(this.chip);\t/* timer A control */\n\t\t\tif (dis_csm) {\t/* CSM Mode Key ON still disabled */\n\t\t\t\tthis.chip.OPN.SL3.key_csm = 0;\t/* CSM Mode Key OFF (verified by Nemesis on real hardware) */\n\t\t\t}\n\t\t}\n\t\t/* timer B control */\n\t\tINTERNAL_TIMER_B(this.chip, len);\n\t\t//if (cfg.debug>1) console.log(\"YM::update\",msg);\n\t\t//// post-update adjustments +neo\n\t\t//this.count += num;\n\t\t//var time = this.start;\t/* FM frame initial timestamp */\n\t\t//var out = [[],[]];\n\t\t//i = 0; j = 0;\n\t\t//do {\n\t\t//\tout[0][i] = buf[0][j|0];\t/* left channel */\n\t\t//\tout[1][i] = buf[1][j|0];\t/* right channel */\n\t\t//\tj += (z), ++i;\n\t\t\t//time += this.ratio, ++i;\t/* increment time counter */\n\t\t//} while (i<len);\n\t\t//this.count = time-num, this.start = time-num;\n\t\t//this.count = this.start = this.count-num;\n\t\tif (cfg.debugArr.length>0) console.log(cfg.debugArr.join(\", \"));\n\t\treturn buf;\n\t};\n\n\t/* DAC precision (normally 9-bit on real hardware, implemented through simple 14-bit channel output bitmasking) */\n\tconfig = function(bits) {\n\t\t_YM.bitmask = ~((1<<(_TL.BITS-bits))-1);\n\t\t/* update L/R panning bitmasks */\n\t\t/*var i = -1; while (++i<12) {\t// 2out*6ch, ORIGINAL METHOD\n\t\t\tif (this.chip.OPN.pan[i]) this.chip.OPN.pan[i] = _YM.bitmask;\n\t\t}*/\n\t\tvar i = this.chip.CH.length; while (--i>-1) {\t// 6ch*2out, NEW PER-CHANNEL PAN\n\t\t\tif (this.chip.CH[i].pan[0]) this.chip.CH[i].pan[0] = _YM.bitmask;\n\t\t\tif (this.chip.CH[i].pan[1]) this.chip.CH[i].pan[1] = _YM.bitmask;\n\t\t}\n\t};\n\n\t/* Toggle channel muting +neo */\n\ttoggle = function(ch,m) {\n\t\tif (ch<6) this.chip.CH[ch].muted = !m;\n\t}\n\n\t/* debug output +neo */\n\ttoString = function(){return this.chip.toString();};\n\n\tload = function(state){};\n\tsave = function(state){};\n\n}\nconst Y = YM2612;\n\n/**** CONFIG ****/\nvar cfg = {\n\thq_fm:0,\t// force 53kHz sampling rate\n\tdac_bits:8,\t// DAC width\n\tmaxcalc:0,\t// for logging, # total chan_calc ops to log\n\tdebug:0,\t// for logging\n\tdebugLocal:0,\n\tdebugArr:[],\n\tmode:0,\t// 0=gpgx, 1=vb/scale\n\tstrict:0\t// abort on bad input if true\n};\n\n/**** GLOBALS ****/\nvar _YM = {\t//// used if cfg.mode = 1 (i.e. scale the tables to a ratio of clock) +neo\n\t\"FREQ_SH\":16,\t// 16.16 fixed point (freq calcs)\n\t\"EG_SH\":16,\t// 16.16 fixed point (env gen timing)\n\t\"LFO_SH\":24,\t// 8.24 fixed point (lfo calcs)\n\t\"TIMER_SH\":16\t// 16.16 fixed point (timers calcs)\n};\n_YM.FREQ_MASK = (1<<_YM.FREQ_SH)-1;\n\n/**** ENVELOPE GENERATOR ****/\nvar _ENV = {\n\t\"BITS\":10,\n\t\"MIN_ATT_INDEX\":0\n};\n_ENV.LEN = 1<<_ENV.BITS;\n_ENV.STEP = 128.0/_ENV.LEN;\n_ENV.MAX_ATT_INDEX = _ENV.LEN-1;\n\nvar _EG = {\n\t'ATT':4,\n\t'DEC':3,\n\t'SUS':2,\n\t'REL':1,\n\t'OFF':0\n};\n\n/**** PHASE GENERATOR (detune mask) ****/\nvar _DT = {\n\t\"BITS\":17\n};\n_DT.LEN = 1<<_DT.BITS;\n_DT.MASK = _DT.LEN-1;\n\n/**** OPERATOR UNIT ****/\nvar _SIN = {\n\t\"BITS\":10\n};\n_SIN.LEN = 1<<_SIN.BITS;\n_SIN.MASK = _SIN.LEN-1;\n\nvar _TL = {\n\t\"BITS\":14\n};\n_TL.RES_LEN = 256;\t// sinus resolution\n_TL.TAB_LEN = 13*2*_TL.RES_LEN;\t// 13 = sinus amplitude bits, 2 = sinus sign bit\n_TL.tab = new Array(_TL.TAB_LEN);\n\n_ENV.QUIET = _TL.TAB_LEN>>3;\n\n/* sin waveform table in 'decibel' scale */\n_YM.sin = new Array(_SIN.LEN);\n\n/* sustain level table (3dB per step) */\n/* bit0, bit1, bit2, bit3, bit4, bit5, bit6 */\n/* 1,    2,    4,    8,    16,   32,   64   (value)*/\n/* 0.75, 1.5,  3,    6,    12,   24,   48   (dB)*/\n/* 0 - 15: 0, 3, 6, 9,12,15,18,21,24,27,30,33,36,39,42,93 (dB)*/\n/* attenuation value (10 bits) = (SL << 2) << 3 */\n_YM.sl = (function(){\n\tvar SC = function(db){return (db*4.0/_ENV.STEP)|0;};\n\treturn [\n\t\tSC(0), SC(1), SC(2), SC(3), SC(4), SC(5), SC(6), SC(7),\n\t\tSC(8), SC(9), SC(10), SC(11), SC(12), SC(13), SC(14), SC(31)\n\t];\n})();\n\n_EG.RATE_STEPS = 8;\n_EG.inc = [\t// 19*_EG.RATE_STEPS\n\t/*cycle:0 1  2 3  4 5  6 7*/\n\t\n\t/* 0 */ 0,1, 0,1, 0,1, 0,1, /* rates 00..11 0 (increment by 0 or 1) */\n\t/* 1 */ 0,1, 0,1, 1,1, 0,1, /* rates 00..11 1 */\n\t/* 2 */ 0,1, 1,1, 0,1, 1,1, /* rates 00..11 2 */\n\t/* 3 */ 0,1, 1,1, 1,1, 1,1, /* rates 00..11 3 */\n\t\n\t/* 4 */ 1,1, 1,1, 1,1, 1,1, /* rate 12 0 (increment by 1) */\n\t/* 5 */ 1,1, 1,2, 1,1, 1,2, /* rate 12 1 */\n\t/* 6 */ 1,2, 1,2, 1,2, 1,2, /* rate 12 2 */\n\t/* 7 */ 1,2, 2,2, 1,2, 2,2, /* rate 12 3 */\n\t\n\t/* 8 */ 2,2, 2,2, 2,2, 2,2, /* rate 13 0 (increment by 2) */\n\t/* 9 */ 2,2, 2,4, 2,2, 2,4, /* rate 13 1 */\n\t/*10 */ 2,4, 2,4, 2,4, 2,4, /* rate 13 2 */\n\t/*11 */ 2,4, 4,4, 2,4, 4,4, /* rate 13 3 */\n\t\n\t/*12 */ 4,4, 4,4, 4,4, 4,4, /* rate 14 0 (increment by 4) */\n\t/*13 */ 4,4, 4,8, 4,4, 4,8, /* rate 14 1 */\n\t/*14 */ 4,8, 4,8, 4,8, 4,8, /* rate 14 2 */\n\t/*15 */ 4,8, 8,8, 4,8, 8,8, /* rate 14 3 */\n\t\n\t/*16 */ 8,8, 8,8, 8,8, 8,8, /* rates 15 0, 15 1, 15 2, 15 3 (increment by 8) */\n\t/*17 */ 16,16,16,16,16,16,16,16, /* rates 15 2, 15 3 for attack */\n\t/*18 */ 0,0, 0,0, 0,0, 0,0, /* infinity rates for attack and decay(s) */\n];\n\n_EG.rate_select = (function(){\n\tvar O = function(a){return (a*_EG.RATE_STEPS)|0;};\n\treturn [\t// env gen rates - 32+64 rates+32 RKS\n\t\t/* 32 infinite time rates (same as Rate 0) */\n\t\tO(18),O(18),O(18),O(18),O(18),O(18),O(18),O(18),\n\t\tO(18),O(18),O(18),O(18),O(18),O(18),O(18),O(18),\n\t\tO(18),O(18),O(18),O(18),O(18),O(18),O(18),O(18),\n\t\tO(18),O(18),O(18),O(18),O(18),O(18),O(18),O(18),\n\t\t\n\t\t/* rates 00-11 */\n\t\t/*\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\t*/\n\t\tO(18),O(18),O( 0),O( 0),\n\t\tO( 0),O( 0),O( 2),O( 2),   // Nemesis's tests\n\t\t\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\tO( 0),O( 1),O( 2),O( 3),\n\t\t\n\t\t/* rate 12 */\n\t\tO( 4),O( 5),O( 6),O( 7),\n\t\t\n\t\t/* rate 13 */\n\t\tO( 8),O( 9),O(10),O(11),\n\t\t\n\t\t/* rate 14 */\n\t\tO(12),O(13),O(14),O(15),\n\t\t\n\t\t/* rate 15 */\n\t\tO(16),O(16),O(16),O(16),\n\t\t\n\t\t/* 32 dummy rates (same as 15 3) */\n\t\tO(16),O(16),O(16),O(16),O(16),O(16),O(16),O(16),\n\t\tO(16),O(16),O(16),O(16),O(16),O(16),O(16),O(16),\n\t\tO(16),O(16),O(16),O(16),O(16),O(16),O(16),O(16),\n\t\tO(16),O(16),O(16),O(16),O(16),O(16),O(16),O(16)\n\t];\n})();\n\n/*rate  0,    1,    2,   3,   4,   5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15*/\n/*shift 11,   10,   9,   8,   7,   6,  5,  4,  3,  2, 1,  0,  0,  0,  0,  0 */\n/*mask  2047, 1023, 511, 255, 127, 63, 31, 15, 7,  3, 1,  0,  0,  0,  0,  0 */\n_EG.rate_shift = (function(){\n\tvar O = function(a){return (a)|0;};\n\treturn [\t// env gen counter shifts - 32+64 rates+32 RKS\n\t\t/* 32 infinite time rates */\n\t\t/* O(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),\n\t\tO(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),\n\t\tO(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0),\n\t\tO(0),O(0),O(0),O(0),O(0),O(0),O(0),O(0), */\n\t\t\n\t\t/* fixed (should be the same as rate 0, even if it makes no difference since increment value is 0 for these rates) */\n\t\tO(11),O(11),O(11),O(11),O(11),O(11),O(11),O(11),\n\t\tO(11),O(11),O(11),O(11),O(11),O(11),O(11),O(11),\n\t\tO(11),O(11),O(11),O(11),O(11),O(11),O(11),O(11),\n\t\tO(11),O(11),O(11),O(11),O(11),O(11),O(11),O(11),\n\t\t\n\t\t/* rates 00-11 */\n\t\tO(11),O(11),O(11),O(11),\n\t\tO(10),O(10),O(10),O(10),\n\t\tO( 9),O( 9),O( 9),O( 9),\n\t\tO( 8),O( 8),O( 8),O( 8),\n\t\tO( 7),O( 7),O( 7),O( 7),\n\t\tO( 6),O( 6),O( 6),O( 6),\n\t\tO( 5),O( 5),O( 5),O( 5),\n\t\tO( 4),O( 4),O( 4),O( 4),\n\t\tO( 3),O( 3),O( 3),O( 3),\n\t\tO( 2),O( 2),O( 2),O( 2),\n\t\tO( 1),O( 1),O( 1),O( 1),\n\t\tO( 0),O( 0),O( 0),O( 0),\n\t\t\n\t\t/* rate 12 */\n\t\tO( 0),O( 0),O( 0),O( 0),\n\t\t\n\t\t/* rate 13 */\n\t\tO( 0),O( 0),O( 0),O( 0),\n\t\t\n\t\t/* rate 14 */\n\t\tO( 0),O( 0),O( 0),O( 0),\n\t\t\n\t\t/* rate 15 */\n\t\tO( 0),O( 0),O( 0),O( 0),\n\t\t\n\t\t/* 32 dummy rates (same as 15 3) */\n\t\tO( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),\n\t\tO( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),\n\t\tO( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),\n\t\tO( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0),O( 0)\n\t];\n})();\n\n_DT.tab = [\t// 4*32\n\t/* this is YM2151 and YM2612 phase increment data (in 10.10 fixed point format)*/\n\t/* FD=0 */\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n\t/* FD=1 */\n\t0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2,\n\t2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7, 8, 8, 8, 8,\n\t/* FD=2 */\n\t1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5,\n\t5, 6, 6, 7, 8, 8, 9,10,11,12,13,14,16,16,16,16,\n\t/* FD=3 */\n\t2, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7,\n\t8 , 8, 9,10,11,12,13,14,16,17,19,20,22,22,22,22\n];\n\n\n/* OPN key frequency number -> key code follow table */\n/* fnum higher 4bit -> keycode lower 2bit */\nvar OPN = {\n\t\"fktable\":[0,0,0,0,0,0,0,1,2,3,3,3,3,3,3,3],\n};\n\nvar LFO = {\n\t/* 8 LFO speed parameters */\n\t/* each value represents number of samples that one LFO level will last for */\n\t\"samples_per_step\":[108, 77, 71, 67, 62, 44, 8, 5],\n\t/*There are 4 different LFO AM depths available, they are:\n\t  0 dB, 1.4 dB, 5.9 dB, 11.8 dB\n\t  Here is how it is generated (in EG steps):\n\n\t  11.8 dB = 0, 2, 4, 6, 8, 10,12,14,16...126,126,124,122,120,118,....4,2,0\n\t   5.9 dB = 0, 1, 2, 3, 4, 5, 6, 7, 8....63, 63, 62, 61, 60, 59,.....2,1,0\n\t   1.4 dB = 0, 0, 0, 0, 1, 1, 1, 1, 2,...15, 15, 15, 15, 14, 14,.....0,0,0\n\n\t  (1.4 dB is loosing precision as you can see)\n\n\t  It's implemented as generator from 0..126 with step 2 then a shift\n\t  right N times, where N is:\n\t    8 for 0 dB\n\t    3 for 1.4 dB\n\t    1 for 5.9 dB\n\t    0 for 11.8 dB\n\t*/\n\t\"ams_depth_shift\":[8,3,1,0],\n\t/*There are 8 different LFO PM depths available, they are:\n\t  0, 3.4, 6.7, 10, 14, 20, 40, 80 (cents)\n\n\t  Modulation level at each depth depends on F-NUMBER bits: 4,5,6,7,8,9,10\n\t  (bits 8,9,10 = FNUM MSB from OCT/FNUM register)\n\n\t  Here we store only first quarter (positive one) of full waveform.\n\t  Full table (lfo_pm_table) containing all 128 waveforms is build\n\t  at run (init) time.\n\n\t  One value in table below represents 4 (four) basic LFO steps\n\t  (1 PM step = 4 AM steps).\n\n\t  For example:\n\t   at LFO SPEED=0 (which is 108 samples per basic LFO step)\n\t   one value from \"lfo_pm_output\" table lasts for 432 consecutive\n\t   samples (4*108=432) and one full LFO waveform cycle lasts for 13824\n\t   samples (32*432=13824; 32 because we store only a quarter of whole\n\t            waveform in the table below)\n\t*/\n\t\"pm_output\":[\t// [7*8][8]\n\t\t/* 7 bits meaningful (of F-NUMBER), 8 LFO output levels per one depth (out of 32), 8 LFO depths */\n\t\t/* FNUM BIT 4: 000 0001xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 2 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 3 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 4 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 5 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 6 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 7 */ [0,   0,   0,   0,   1,   1,   1,   1],\n\n\t\t/* FNUM BIT 5: 000 0010xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 2 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 3 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 4 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 5 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 6 */ [0,   0,   0,   0,   1,   1,   1,   1],\n\t\t/* DEPTH 7 */ [0,   0,   1,   1,   2,   2,   2,   3],\n\n\t\t/* FNUM BIT 6: 000 0100xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 2 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 3 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 4 */ [0,   0,   0,   0,   0,   0,   0,   1],\n\t\t/* DEPTH 5 */ [0,   0,   0,   0,   1,   1,   1,   1],\n\t\t/* DEPTH 6 */ [0,   0,   1,   1,   2,   2,   2,   3],\n\t\t/* DEPTH 7 */ [0,   0,   2,   3,   4,   4,   5,   6],\n\n\t\t/* FNUM BIT 7: 000 1000xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 2 */ [0,   0,   0,   0,   0,   0,   1,   1],\n\t\t/* DEPTH 3 */ [0,   0,   0,   0,   1,   1,   1,   1],\n\t\t/* DEPTH 4 */ [0,   0,   0,   1,   1,   1,   1,   2],\n\t\t/* DEPTH 5 */ [0,   0,   1,   1,   2,   2,   2,   3],\n\t\t/* DEPTH 6 */ [0,   0,   2,   3,   4,   4,   5,   6],\n\t\t/* DEPTH 7 */ [0,   0,   4,   6,   8,   8, 0xa, 0xc],\n\n\t\t/* FNUM BIT 8: 001 0000xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   1,   1,   1,   1],\n\t\t/* DEPTH 2 */ [0,   0,   0,   1,   1,   1,   2,   2],\n\t\t/* DEPTH 3 */ [0,   0,   1,   1,   2,   2,   3,   3],\n\t\t/* DEPTH 4 */ [0,   0,   1,   2,   2,   2,   3,   4],\n\t\t/* DEPTH 5 */ [0,   0,   2,   3,   4,   4,   5,   6],\n\t\t/* DEPTH 6 */ [0,   0,   4,   6,   8,   8, 0xa, 0xc],\n\t\t/* DEPTH 7 */ [0,   0,   8, 0xc,0x10,0x10,0x14,0x18],\n\n\t\t/* FNUM BIT 9: 010 0000xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   2,   2,   2,   2],\n\t\t/* DEPTH 2 */ [0,   0,   0,   2,   2,   2,   4,   4],\n\t\t/* DEPTH 3 */ [0,   0,   2,   2,   4,   4,   6,   6],\n\t\t/* DEPTH 4 */ [0,   0,   2,   4,   4,   4,   6,   8],\n\t\t/* DEPTH 5 */ [0,   0,   4,   6,   8,   8, 0xa, 0xc],\n\t\t/* DEPTH 6 */ [0,   0,   8, 0xc,0x10,0x10,0x14,0x18],\n\t\t/* DEPTH 7 */ [0,   0,0x10,0x18,0x20,0x20,0x28,0x30],\n\n\t\t/* FNUM BIT10: 100 0000xxxx */\n\t\t/* DEPTH 0 */ [0,   0,   0,   0,   0,   0,   0,   0],\n\t\t/* DEPTH 1 */ [0,   0,   0,   0,   4,   4,   4,   4],\n\t\t/* DEPTH 2 */ [0,   0,   0,   4,   4,   4,   8,   8],\n\t\t/* DEPTH 3 */ [0,   0,   4,   4,   8,   8, 0xc, 0xc],\n\t\t/* DEPTH 4 */ [0,   0,   4,   8,   8,   8, 0xc,0x10],\n\t\t/* DEPTH 5 */ [0,   0,   8, 0xc,0x10,0x10,0x14,0x18],\n\t\t/* DEPTH 6 */ [0,   0,0x10,0x18,0x20,0x20,0x28,0x30],\n\t\t/* DEPTH 7 */ [0,   0,0x20,0x30,0x40,0x40,0x50,0x60]\n\t],\n\t/* all 128 LFO PM waveforms */\n\t/* 128 combinations of 7 bits meaningful (of F-NUMBER), 8 LFO depths, 32 LFO output levels per one depth */\n\t\"pm_table\":new Array(128*8*32)\n};\n\nOPN.CHAN = function(N){return N&0x3;};\nOPN.SLOT = function(N){return (N>>2)&0x3;};\n\n/* slot number */\nvar _SLOT = [0,2,1,3];\n\n/**** END GLOBALS ****/\n\n/**** FM STRUCTS based on genplus-gx ****/\nfunction FM_SLOT() {\n\tthis.DT = -1;\t// index into ym2612.OPN.ST.dt_tab, formerly INT32*\tdetune: dt_tab[DT]\n\tthis.KSR = 0;\t// UINT8\tkey scale rate: 3-KSR\n\tfunction _rate() {\n\t\tthis.ar = 0;\t// UINT32\tattack rate\n\t\tthis.d1r = 0;\t// UINT32\tdecay rate\n\t\tthis.d2r = 0;\t// UINT32\tsustain rate\n\t\tthis.rr = 0;\t// UINT32\trelease rate\n\t\tthis.ksr = 0;\t// UINT8\tkey scale rate: kcode>>(3-KSR)\n\t\tthis.mul = 1;\t// UINT32\tmultiple: ML_TABLE[ML]\n\t\tthis.init = function() {\n\t\t\tthis.ar = 0;\n\t\t\tthis.d1r = 0;\n\t\t\tthis.d2r = 0;\n\t\t\tthis.rr = 0;\n\t\t\tthis.ksr = 0;\n\t\t\tthis.mul = 1;\n\t\t};\n\t\tthis.toString = function(){return [\"MUL=\"+this.mul,\"KS=\"+this.ksr,\"AR=\"+this.ar,\"D1R=\"+this.d1r,\"D2R=\"+this.d2r,\"RR=\"+this.rr].join(',');};\n\t}\n\tthis.rate = new _rate();\n\t// phase generator\n\tthis.phase = 0;\t// UINT32\tphase counter\n\tthis.Incr = 0;\t// INT32\tphase step\n\t// envelope generator\n\tthis.state = 0;\t// UINT8\tphase type\n\tthis.tl = 0;\t// UINT32\ttotal level: TL<<3\n\tthis.volume = 0;\t// UINT32\tenvelope counter\n\tthis.sl = 0;\t// UINT32\tsustain level: sl_table[SL]\n\tthis.vol_out = 0;\t// UINT32\tcurrent output from EG (without AM from LFO)\n\tfunction _eg() {\n\t\tthis.ar=0;\t// UINT8\n\t\tthis.d1r=0;\t// UINT8\n\t\tthis.d2r=0;\t// UINT8\n\t\tthis.rr=0;\t// UINT8\n\t\tthis.init = function(){\n\t\t\tthis.ar=0;\t// UINT8\n\t\t\tthis.d1r=0;\t// UINT8\n\t\t\tthis.d2r=0;\t// UINT8\n\t\t\tthis.rr=0;\t// UINT8\n\t\t};\n\t}\n\tthis.eg = {\n\t\tsh:new _eg(),\t// state\n\t\tsel:new _eg(),\n\t\tinit:function(){this.sh.init();this.sel.init();}\n\t};\n\tthis.ssg = 0;\t// UINT8\tssg-eg waveform\n\tthis.ssgn = 0;\t// UINT8\tssg-eg negated output\n\tthis.key = 0;\t// UINT8\t0 = last key was KEY_OFF, 1 = KEY_ON\n\t// lfo\n\tthis.AMmask = 0;\t// UINT32\tAM enable flag\n\tthis.reset = function() {\n\t\tthis.Incr = -1;\n\t\tthis.key = 0;\n\t\tthis.phase = 0;\n\t\tthis.ssgn = 0;\n\t\tthis.state = _EG.OFF;\n\t\tthis.volume = _ENV.MAX_ATT_INDEX;\n\t\tthis.vol_out = _ENV.MAX_ATT_INDEX;\n\t\tthis.out[0] = 0, this.out[1] = 0;\n\t};\n\tthis.debug = {\n\t\t\"dt1mul\":0, \"dt1\":0, \"mul\":0,\n\t\t\"tl\":0,\n\t\t\"ksar\":0, \"ks\":0, \"ar\":0,\n\t\t\"amd1r\":0, \"am\":0, \"d1r\":0,\n\t\t\"d2r\":0,\n\t\t\"slrr\":0, \"sl\":0, \"rr\":0\n\t};\n\tthis.debug.toString = function(){return [\n\t\t\"TL:\"+(this.tl),\n\t\t\"DT1:\"+this.dt1,\n\t\t\"MUL:\"+this.mul,\n\t\t\"KS:\"+this.ks,\"AR:\"+this.ar,\n\t\t\"AM:\"+this.am,\"D1R:\"+this.d1r,\n\t\t\"D2R:\"+this.d2r,\n\t\t\"SL:\"+(this.sl),\"RR:\"+this.rr\n\t].join(',');};\n\tthis.out = [0,0];\t// replace FM_CH.op1_out +neo\n\tthis.toString = function(){return \"OP{\"+this.debug.toString()+\"}\";};\n}\nfunction FM_CH() {\n\tthis.SLOT = [\t// four slots/ops\n\t\tnew FM_SLOT(),\n\t\tnew FM_SLOT(),\n\t\tnew FM_SLOT(),\n\t\tnew FM_SLOT()\n\t];\n\tthis.ALGO = 0;\t// UINT8\talgorithm\n\tthis.FB = 0;\t// UINT8\tfeedback shift\n\tthis.op1_out = [0,0];\t// INT32\top1 output for feedback (stereo)\n\tthis.connect = ['x','x','x','x'];\t// SLOT output pointers, formerly INT32*[4]\n\tthis.mem = {\n\t\tconnect:'mem',\t// INT32*\twhere to put the delayed sample (MEM)\n\t\tvalue:0\t// INT32\tdelated sample (MEM) value\n\t};\n\tthis.pms = 0;\t// INT32\tchannel PMS\n\tthis.ams = 0;\t// UINT8\tchannel AMS\n\tthis.fc = 0;\t// UINT32\tfnum,blk adjusted to sample rate\n\tthis.kcode = 0;\t// UINT8\tkey code\n\tthis.block_fnum = 0;\t// UINT32\tcurrent blk/fnum value for this slot\n\tthis.fn_h = 0;\t// replaces FM_ST.fn_h\n\tthis.outputs = {\n\t\t\"m1\":0,\n\t\t\"m2\":0,\n\t\t\"c1\":0,\n\t\t\"c2\":0,\n\t\t\"mem\":0,\n\t\t\"x\":0,\n\t\t\"out\":0\t// replaces out_fm[ch]\n\t};\n\tthis.canCSM = 0;\t// replaces hardcoded check against CH3\n\tthis.canDAC = 0;\t// replaces hardcoded check against CH6\n\tthis.muted = 0;\n\tthis.pan = [0,0];\t// replaces FM_OPN.pan\n\tthis.reset = function() {\n\t\tthis.mem.value = 0, this.op1_out[0] = 0, this.op1_out[1] = 0;\n\t\tvar s = this.SLOT.length; while (--s>-1) this.SLOT[s].reset();\n\t};\n\tthis.toString = function(){return \"CH{\"+[\n\t\t\"ALGO:\"+this.ALGO,\"FB:\"+this.FB,\n\t\t\"PMS:\"+this.pms,\"AMS:\"+this.ams,\n\t\t\"SLOTS[\"+this.SLOT.join(',')+\"]\"\n\t].join(',')+\"}\";};\n}\nfunction FM_ST(c, r) {\n\tthis.address = 0;\t// UINT16\taddress register\n\tthis.status = 0;\t// UINT8\tstatus flag\n\tthis.mode = 0;\t// UINT32\tCSM/3SLOT mode\n\t//this.fn_h = 0;\t// UINT8\tfreq latch\n\tthis.timer_base = 1;\n\tthis.TA = 0;\t// INT32\ttimer a value\n\tthis.TAL = 0;\t// INT32\ttimer a base\n\tthis.TAC = 0;\t// INT32\ttimer a counter\n\tthis.TB = 0;\t// INT32\ttimer b value\n\tthis.TBL = 0;\t// INT32\ttimer b base\n\tthis.TBC = 0;\t// INT32\ttimer b counter\n\tthis.dt_tab = [\t// INT32[8][32]\tdetune table\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32),\n\t\tnew Array(32)\n\t];\n\tthis.clock = c||7670448;\n\tthis.rate = r||44100;\n}\n\nfunction FM_3SLOT() {\n\tthis.fc = [0,0,0];\t// UINT32[3]\tfnum3,blk3 calculated\n\tthis.fn_h = 0;\t// UINT8\tfreq3 latch\n\tthis.kcode = [0,0,0];\t// UINT8[3]\tkey code\n\tthis.block_fnum = [0,0,0];\t// UINT32[3]\tcurrent fnum value for this slot\n\tthis.key_csm = 0;\t// UINT8\tCSM mode KEY_ON flag\n}\n\nfunction FM_OPN(c, r) {\n\tthis.ST = new FM_ST(c,r);\n\tthis.SL3 = new FM_3SLOT();\n\t//this.pan = new Array(6*2);\t// UINT[6*2]\tfm channels output masks (0xffffffff = enable)\n\tfunction _timer() {\n\t\tthis.cnt = 0;\n\t\tthis.timer = 0;\n\t\tthis.timer_add = 0;\t// vb\n\t\tthis.timer_overflow = 0;\t// vb unused for eg\n\t\tthis.init = function() {\n\t\t\tthis.cnt = 0;\t// current phase counter (UINT32 for eg, UINT8 for lfo)\n\t\t\tthis.timer = 0;\t// UINT32\n\t\t\tthis.timer_add = 0;\t// UINT32\tstep of timer\n\t\t\tthis.timer_overflow = 0;\t// UINT32\ttimer overflows every N samples\n\t\t};\n\t}\n\tthis.eg = new _timer();\n\tthis.lfo = new _timer();\n\tthis.lfo.AM = 0;\t// UINT32\tcurrent lfo AM step\n\tthis.lfo.PM = 0;\t// UINT32\tcurrent lfo PM step\n\tthis.fn = {\"table\":new Array(4096), \"max\":0};\n}\n\nfunction YMX(c,r) {\n\tthis.CH = [new FM_CH(), new FM_CH(), new FM_CH(), new FM_CH(), new FM_CH(), new FM_CH()];\n\tthis.CH[2].canCSM = 1;\n\tthis.CH[5].canDAC = 1;\n\tthis.dacen = 0;\t// UINT8\n\tthis.dacout = 0;\t// INT32\n\tthis.OPN = new FM_OPN(c,r);\n\tthis.toString = function(){return \"YM[\\n\"+this.CH.join(',\\n')+\"\\n]\";};\n\t// HACK: Add a buffer to store our writes in so we can read the values we wrote back.\n\tthis.buffer = new Array(0x200).fill(0);\n}\n/**** END FM STRUCTS ****/\n\n/**** FM DEFS based on genplus-gx ****/\n/* current chip state */\n//_YM.m2 = 0; _YM.c1 = 0; _YM.c2 = 0;\t// INT32\tphase modulation input for ops 2,3,4\n//_YM.mem = 0;\t// INT32\tone sample delay memory\n//_YM.out_fm = [0,0,0,0,0,0,0,0];\t// INT32[8]\toutputs of working channels\t// REPLACED BY FM_CH.out\n_YM.bitmask = 0;\t//UINT32\tworking channels output bitmasking (DAC quantization)\n\nFM_SLOT.prototype.keyOn = function(x,csm) {\n\tif (!this.key&&!x.OPN.SL3.key_csm) {\n\t\tthis.phase = 0;\t/* restart Phase Generator */\n\t\tthis.ssgn = 0;\t/* reset SSG-EG inversion flag */\n\t\tif ((this.rate.ar+this.rate.ksr)<94)\t/*32+62*/\n\t\t\tthis.state = (this.volume<=_ENV.MIN_ATT_INDEX)?(this.sl===_ENV.MIN_ATT_INDEX?_EG.SUS:_EG.DEC):_EG.ATT;\n\t\telse {\n\t\t\tthis.volume = _ENV.MIN_ATT_INDEX;\t/* force attenuation level to 0 */\n\t\t\tthis.state = (this.sl===_ENV.MIN_ATT_INDEX)?_EG.SUS:_EG.DEC;\n\t\t}\n\t\t/* recalculate EG output */\n\t\tif ((this.ssg&0x08)>0&&(this.ssgn^(this.ssg&0x04))>0) this.vol_out = this.tl+((0x200-this.volume)&_ENV.MAX_ATT_INDEX);\n\t\telse this.vol_out = this.tl+(this.volume|0);\n\t}\n\tif (!csm) this.key = 1;\n};\nFM_CH.prototype.keyOn = function(x,s) {this.SLOT[s].keyOn(x,0);};\n\nFM_SLOT.prototype.keyOff = function(x,csm) {\n\tif ((csm&&!this.key)||(!csm&&this.key&&!x.OPN.SL3.key_csm)) {\n\t\tif (this.state>_EG.REL) {\n\t\t\tthis.state = _EG.REL;\t/* phase -> Release */\n\t\t\t/* SSG-EG specific update */\n\t\t\tif ((this.ssg&0x08)>0) {\n\t\t\t\t/* convert EG attenuation level */\n\t\t\t\tif ((this.ssgn^(this.ssg&0x04))>0) this.volume = (0x200-this.volume)|0;\n\t\t\t\t/* force EG attenuation level */\n\t\t\t\tif (this.volume>=0x200) {\n\t\t\t\t\tthis.volume = _ENV.MAX_ATT_INDEX;\n\t\t\t\t\tthis.state = _EG.OFF;\n\t\t\t\t}\n\t\t\t\tthis.vol_out = this.tl+(this.volume|0);\t/* recalculate EG output */\n\t\t\t}\n\t\t}\n\t}\n\tif (!csm) this.key = 0;\n};\nFM_CH.prototype.keyOff = function(x,s) {this.SLOT[s].keyOff(x,0);};\n\nFM_CH.prototype.keyOnCSM = function(x,s) {this.SLOT[s].keyOn(x,1);};\nFM_CH.prototype.keyOffCSM = function(x,s) {this.SLOT[s].keyOff(x,1);};\n\nFM_CH.prototype.keyControlCSM = function(x) {\n\tthis.keyOnCSM(_SLOT[0]);\n\tthis.keyOnCSM(_SLOT[1]);\n\tthis.keyOnCSM(_SLOT[2]);\n\tthis.keyOnCSM(_SLOT[3]);\n\tx.OPN.SL3.key_csm = 1;\n};\n\nfunction INTERNAL_TIMER_A(x) {\n\tif ((x.OPN.ST.mode&0x01)>0) {\n\t\tif (cfg.mode) x.OPN.ST.TAC -= x.OPN.ST.timer_base;\t// vb\n\t\telse --x.OPN.ST.TAC;\t// gpgx\n\t\tif (x.OPN.ST.TAC<=0) {\n\t\t\t/* set status (if enabled) */\n\t\t\tif ((x.OPN.ST.mode&0x04)>0) x.OPN.ST.status |= 0x01;\n\t\t\t/* reload the counter */\n\t\t\tif (cfg.mode&&x.OPN.ST.TAL) x.OPN.ST.TAC += x.OPN.ST.TAL;\t// vb\n\t\t\telse x.OPN.ST.TAC = x.OPN.ST.TAL;\t// gpgx\n\t\t\t/* CSM mode auto key on */\n\t\t\tif ((x.OPN.ST.mode & 0xC0)===0x80) x.CH[2].keyControlCSM();\n\t\t}\n\t}\n}\nfunction INTERNAL_TIMER_B(x, step) {\n\tif ((x.OPN.ST.mode & 0x02)>0) {\n\t\tif (cfg.mode) x.OPN.ST.TBC -= x.OPN.ST.timer_base*step;\t// vb\n\t\telse x.OPN.ST.TBC -= step;\t// gpgx\n\t\tif (x.OPN.ST.TBC <= 0) {\n\t\t\t/* set status (if enabled) */\n\t\t\tif ((x.OPN.ST.mode & 0x08)>0) x.OPN.ST.status |= 0x02;\n\t\t\t/* reload the counter */\n\t\t\tif (x.OPN.ST.TBL) x.OPN.ST.TBC += x.OPN.ST.TBL;\n\t\t\telse x.OPN.ST.TBC = x.OPN.ST.TBL;\n\t\t}\n\t}\n}\n\n/* OPN Mode Register Write */\nfunction set_timers(x,v) {\n\t/* b7 = CSM MODE */\n\t/* b6 = 3 slot mode */\n\t/* b5 = reset b */\n\t/* b4 = reset a */\n\t/* b3 = timer enable b */\n\t/* b2 = timer enable a */\n\t/* b1 = load b */\n\t/* b0 = load a */\n\tif (((x.OPN.ST.mode^v)&0xc0)>0) {\n\t\tx.CH[2].SLOT[_SLOT[0]].Incr = -1;\t// phase increment need to be recalculated\n\t\t// csm mode disabled and csm keyon active\n\t\tif (((v&0xc0)!==0x80)&&x.OPN.SL3.key_csm) {\n\t\t\t// csm mode keyoff\n\t\t\tx.CH[2].keyOffCSM(_SLOT[0]);\n\t\t\tx.CH[2].keyOffCSM(_SLOT[1]);\n\t\t\tx.CH[2].keyOffCSM(_SLOT[2]);\n\t\t\tx.CH[2].keyOffCSM(_SLOT[3]);\n\t\t\tx.OPN.SL3.key_csm = 0;\n\t\t}\n\t}\n\t// reload timers\n\tif ((v&1)&&!(x.OPN.ST.mode&1)) x.OPN.ST.TAC = x.OPN.ST.TAL;\n\tif ((v&2)&&!(x.OPN.ST.mode&2)) x.OPN.ST.TBC = x.OPN.ST.TBL;\n\t// reset timers flags\n\tx.OPN.ST.status &= ~v>>4;\n\tx.OPN.ST.mode = v;\n}\n\n/* set algorithm connection */\nFM_CH.prototype.setupConnection = function() {\n\tvar carrier = 'out';\n\tvar o = {m1:0, m2:2, c1:1, c2:3}, mem = this.mem.connect;\n\tswitch (this.ALGO) {\n\t\tcase 0:\n\t\t\t/* M1---C1---MEM---M2---C2---OUT */\n\t\t\tthis.connect[o.m1] = 'c1';\n\t\t\tthis.connect[o.c1] = 'mem';\n\t\t\tthis.connect[o.m2] = 'c2';\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'm2';\n\t\t\tthis.mem.connect = 'm2';\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\t/* M1------+-MEM---M2---C2---OUT */\n\t\t\t/*      C1-+                     */\n\t\t\tthis.connect[o.m1] = 'mem';\n\t\t\tthis.connect[o.c1] = 'mem';\n\t\t\tthis.connect[o.m2] = 'c2';\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'm2';\n\t\t\tthis.mem.connect = 'm2';\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\t/* M1-----------------+-C2---OUT */\n\t\t\t/*      C1---MEM---M2-+          */\n\t\t\tthis.connect[o.m1] = 'c2';\n\t\t\tthis.connect[o.c1] = 'mem';\n\t\t\tthis.connect[o.m2] = 'c2';\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'm2';\n\t\t\tthis.mem.connect = 'm2';\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\t/* M1---C1---MEM------+-C2---OUT */\n\t\t\t/*                 M2-+          */\n\t\t\tthis.connect[o.m1] = 'c1';\n\t\t\tthis.connect[o.c1] = 'mem';\n\t\t\tthis.connect[o.m2] = 'c2';\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'c2';\n\t\t\tthis.mem.connect = 'c2';\n\t\t\tbreak;\n\t\tcase 4:\n\t\t\t/* M1---C1-+-OUT */\n\t\t\t/* M2---C2-+     */\n\t\t\t/* MEM: not used */\n\t\t\tthis.connect[o.m1] = 'c1';\n\t\t\tthis.connect[o.c1] = carrier;\n\t\t\tthis.connect[o.m2] = 'c2';\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'mem';\n\t\t\tthis.mem.connect = 'mem';\n\t\t\tbreak;\n\t\tcase 5:\n\t\t\t/*    +----C1----+     */\n\t\t\t/* M1-+-MEM---M2-+-OUT */\n\t\t\t/*    +----C2----+     */\n\t\t\tthis.connect[o.m1] = 'x';\n\t\t\tthis.connect[o.c1] = carrier;\n\t\t\tthis.connect[o.m2] = carrier;\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'm2';\n\t\t\tthis.mem.connect = 'm2';\n\t\t\tbreak;\n\t\tcase 6:\n\t\t\t/* M1---C1-+     */\n\t\t\t/*      M2-+-OUT */\n\t\t\t/*      C2-+     */\n\t\t\t/* MEM: not used */\n\t\t\tthis.connect[o.m1] = 'c1';\n\t\t\tthis.connect[o.c1] = carrier;\n\t\t\tthis.connect[o.m2] = carrier;\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'mem';\n\t\t\tthis.mem.connect = 'mem';\n\t\t\tbreak;\n\t\tcase 7:\n\t\t\t/* M1-+     */\n\t\t\t/* C1-+-OUT */\n\t\t\t/* M2-+     */\n\t\t\t/* C2-+     */\n\t\t\t/* MEM: not used*/\n\t\t\tthis.connect[o.m1] = carrier;\n\t\t\tthis.connect[o.c1] = carrier;\n\t\t\tthis.connect[o.m2] = carrier;\n\t\t\t//if (mem!=='mem') this.connect[o[mem]] = 'mem';\n\t\t\tthis.mem.connect = 'mem';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (cfg.strict) throw new Error(\"CH::setup_connection - unsupported algorithm (\"+this.ALGO+\")\");\n\t\t\telse break;\n\t}\n\tthis.connect[3] = carrier;\n};\n\n/* set detune & multiple */\nFM_SLOT.prototype.set_det_mul = function(x,v) {\n\tthis.rate.mul = ((v&0x0f)>0)?((v&0x0f)<<1):1;\n\tthis.DT = (v>>4)&7;//x.OPN.ST.dt_tab[(v>>4)&7];\n\tthis.debug.dt1mul = v&0xff;\n\tthis.debug.dt1 = this.DT;\n\tthis.debug.mul = v&0x0f;\n};\nFM_CH.prototype.set_det_mul = function(x,s,v) {\n\tthis.SLOT[s].set_det_mul(x,v);\n\tthis.SLOT[_SLOT[0]].Incr = -1;\n};\n\n/* set total level */\nFM_SLOT.prototype.set_tl = function(v) {\n\tthis.debug.tl = (v&0x7f);\n\tthis.tl = (this.debug.tl)<<(_ENV.BITS-7);\t// 7-bit tl\n\t// recalculate eg output\n\tif ((this.ssg&0x08)>0&&((this.ssgn^(this.ssg&0x04))>0)&&this.state>_EG.REL)\n\t\tthis.vol_out = this.tl+(((0x200-this.volume)|0)&_ENV.MAX_ATT_INDEX);\n\telse\n\t\tthis.vol_out = this.tl+((this.volume)|0);\n};\nFM_CH.prototype.set_tl = function(s,v) {this.SLOT[s].set_tl(v);};\n\n/* set attack rate & key scale  */\nFM_SLOT.prototype.set_ar_ksr = function(v) {\n\tthis.debug.ksar = v&0xff;\n\tthis.debug.ks = v>>6;\n\tthis.debug.ar = v&0x1f;\n\tvar old_ksr = this.KSR|0;\n\tthis.rate.ar = ((this.debug.ar)>0)?32+((this.debug.ar)<<1):0;\n\tthis.KSR = 3-(this.debug.ks);\n\t/* Even if it seems unnecessary to do it here, it could happen that KSR and KC  */\n\t/* are modified but the resulted SLOT->ksr value (kc >> SLOT->KSR) remains unchanged. */\n\t/* In such case, Attack Rate would not be recalculated by \"refresh_fc_eg_slot\". */\n\t/* This fixes the intro of \"The Adventures of Batman & Robin\" (Eke-Eke)         */\n\tif ((this.rate.ar+this.rate.ksr)<94) {\t/*32+62*/\n\t\tvar q = (this.rate.ar+this.rate.ksr)|0;\n\t\tthis.eg.sh.ar = _EG.rate_shift[q];\n\t\tthis.eg.sel.ar = _EG.rate_select[q];\n\t}\n\telse {\t/* verified by Nemesis on real hardware (Attack phase is blocked) */\n\t\tthis.eg.sh.ar = 0;\n\t\tthis.eg.sel.ar = 18*_EG.RATE_STEPS;\n\t}\n\treturn this.KSR!==old_ksr;\n};\nFM_CH.prototype.set_ar_ksr = function(s,v) {if (this.SLOT[s].set_ar_ksr(v)) this.SLOT[_SLOT[0]].Incr = -1;};\n\n/* set decay rate */\nFM_SLOT.prototype.set_dr = function(v) {\n\tthis.debug.amd1r = v&0xff;\n\tthis.debug.am = v&0x80;\n\tthis.debug.d1r = v&0x1f;\n\tthis.rate.d1r = ((this.debug.d1r)>0)?32+((this.debug.d1r)<<1):0;\n\tvar q = (this.rate.d1r+this.rate.ksr)|0;\n\tthis.eg.sh.d1r = _EG.rate_shift[q];\n\tthis.eg.sel.d1r = _EG.rate_select[q];\n};\nFM_CH.prototype.set_dr = function(s,v) {this.SLOT[s].set_dr(v);};\n\n/* set sustain rate */\nFM_SLOT.prototype.set_sr = function(v) {\n\tthis.debug.d2r = v&0x1f;\n\tthis.rate.d2r = ((this.debug.d2r)>0)?32+((this.debug.d2r)<<1):0;\n\tvar q = (this.rate.d2r+this.rate.ksr)|0;\n\tthis.eg.sh.d2r = _EG.rate_shift[q];\n\tthis.eg.sel.d2r = _EG.rate_select[q];\n};\nFM_CH.prototype.set_sr = function(s,v) {this.SLOT[s].set_sr(v);};\n\n/* set release rate */\nFM_SLOT.prototype.set_sl_rr = function(v) {\n\tthis.debug.slrr = v&0xff;\n\tthis.debug.sl = (v>>4)&0x0f;\n\tthis.debug.rr = v&0x0f;\n\tthis.sl = _YM.sl[this.debug.sl];\n\t// check eg state changes\n\tif (this.state===_EG.DEC&&this.volume>=(this.sl|0)) this.state = _EG.SUS;\n\tthis.rate.rr = 34+((this.debug.rr)<<2);\n\tvar q = (this.rate.rr+this.rate.ksr)|0;\n\tthis.eg.sh.rr = _EG.rate_shift[q];\n\tthis.eg.sel.rr = _EG.rate_select[q];\n};\nFM_CH.prototype.set_sl_rr = function(s,v) {this.SLOT[s].set_sl_rr(v);};\n\n/* advance LFO to next sample */\nfunction advance_lfo(x) {\n\tvar _upd;\n\tif (cfg.mode) _upd = function(o) {\t// vb\n\t\twhile (o.lfo.timer>=o.lfo.timer_overflow) {\n\t\t\to.lfo.timer -= o.lfo.timer_overflow;\n\t\t\to.lfo.cnt = (o.lfo.cnt+1)&127;\t/* There are 128 LFO steps */\n\t\t\t/* triangle (inverted) */\n\t\t\t/* AM: from 126 to 0 step -2, 0 to 126 step +2 */\n\t\t\tif (o.lfo.cnt<64) o.lfo.AM = (o.lfo.cnt^63)<<1;\n\t\t\telse o.lfo.AM = (o.lfo.cnt&63)<<1;\n\t\t\to.lfo.PM = o.lfo.cnt>>2;\t/* PM works with 4 times slower clock */\n\t\t}\n\t};\n\telse _upd = function(o) {\t// gpgx\n\t\tif (o.lfo.timer>o.lfo.timer_overflow) {\n\t\t\to.lfo.timer = 0;\n\t\t\to.lfo.cnt = (o.lfo.cnt+1)&127;\t/* There are 128 LFO steps */\n\t\t\t/* triangle (inverted) */\n\t\t\t/* AM: from 126 to 0 step -2, 0 to 126 step +2 */\n\t\t\tif (o.lfo.cnt<64) o.lfo.AM = (o.lfo.cnt^63)<<1;\n\t\t\telse o.lfo.AM = (o.lfo.cnt&63)<<1;\n\t\t\to.lfo.PM = o.lfo.cnt>>2;\t/* PM works with 4 times slower clock */\n\t\t}\n\t};\n\tif (x.OPN.lfo.timer_overflow) {\t/* LFO enabled ? */\n\t\t/* increment LFO timer (every samples) */\n\t\tif (cfg.mode) x.OPN.lfo.timer += x.OPN.lfo.timer_add;\t// vb\n\t\telse ++x.OPN.lfo.timer;\t// gpgx\n\t\t/* when LFO is enabled, one level will last for 108, 77, 71, 67, 62, 44, 8 or 5 samples */\n\t\t_upd(x.OPN);\n\t}\n}\n\nFM_SLOT.prototype.advance_eg = function(eg_cnt) {\n\tswitch (this.state) {\n\t\tcase _EG.ATT:\t/* attack phase */\n\t\t\tif (!(eg_cnt&((1<<this.eg.sh.ar)-1))) {\n\t\t\t\tthis.volume += (~this.volume*(_EG.inc[this.eg.sel.ar+((eg_cnt>>this.eg.sh.ar)&7)]))>>4;\t/* update attenuation level */\n\t\t\t\t/* check phase transition*/\n\t\t\t\tif (this.volume<=_ENV.MIN_ATT_INDEX) {\n\t\t\t\t\tthis.volume = _ENV.MIN_ATT_INDEX;\n\t\t\t\t\tthis.state = (this.sl===_ENV.MIN_ATT_INDEX)?_EG.SUS:_EG.DEC;\t/* special case where SL=0 */\n\t\t\t\t}\n\t\t\t\t/* recalculate EG output */\n\t\t\t\tif ((this.ssg&0x08)>0&&(this.ssgn^(this.ssg&0x04))>0) this.vol_out = this.tl+(((0x200-this.volume)|0)&_ENV.MAX_ATT_INDEX);\t/* SSG-EG Output Inversion */\n\t\t\t\telse this.vol_out = this.tl+(this.volume|0);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase _EG.DEC:\t/* decay phase */\n\t\t\tif (!(eg_cnt&((1<<this.eg.sh.d1r)-1))) {\n\t\t\t\tif ((this.ssg&0x08)>0) {\t/* SSG EG type */\n\t\t\t\t\t/* update attenuation level */\n\t\t\t\t\tif (this.volume<0x200) {\n\t\t\t\t\t\tthis.volume += _EG.inc[this.eg.sel.d1r+((eg_cnt>>this.eg.sh.d1r)&7)]<<2;\n\t\t\t\t\t\t/* recalculate EG output */\n\t\t\t\t\t\tif ((this.ssgn^(this.ssg&0x04))>0) this.vol_out = this.tl+(((0x200-this.volume)|0)&_ENV.MAX_ATT_INDEX);\t/* SSG-EG Output Inversion */\n\t\t\t\t\t\telse this.vol_out = this.tl+(this.volume|0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthis.volume += (_EG.inc[this.eg.sel.d1r+((eg_cnt>>this.eg.sh.d1r)&7)]);\n\t\t\t\t\tthis.vol_out = this.tl+(this.volume|0);\t/* recalculate EG output */\n\t\t\t\t}\n\t\t\t\t/* check phase transition*/\n\t\t\t\tif (this.volume>=(this.sl|0)) this.state = _EG.SUS;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase _EG.SUS:\t/* sustain phase */\n\t\t\tif (!(eg_cnt&((1<<this.eg.sh.d2r)-1))) {\n\t\t\t\t/* SSG EG type */\n\t\t\t\tif ((this.ssg&0x08)>0) {\n\t\t\t\t\t/* update attenuation level */\n\t\t\t\t\tif (this.volume<0x200) {\n\t\t\t\t\t\tthis.volume += _EG.inc[this.eg.sel.d2r+((eg_cnt>>this.eg.sh.d2r)&7)]<<2;\n\t\t\t\t\t\t/* recalculate EG output */\n\t\t\t\t\t\tif ((this.ssgn^(this.ssg&0x04))>0) this.vol_out = this.tl+(((0x200-this.volume)|0)&_ENV.MAX_ATT_INDEX);\t/* SSG-EG Output Inversion */\n\t\t\t\t\t\telse this.vol_out = this.tl+(this.volume|0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/* update attenuation level */\n\t\t\t\t\tthis.volume += (_EG.inc[this.eg.sel.d2r+((eg_cnt>>this.eg.sh.d2r)&7)]);\n\t\t\t\t\t/* check phase transition*/\n\t\t\t\t\tif (this.volume>=_ENV.MAX_ATT_INDEX) this.volume = _ENV.MAX_ATT_INDEX;\t/* do not change SLOT->state (verified on real chip) */\n\t\t\t\t\tthis.vol_out = this.tl+(this.volume|0);\t/* recalculate EG output */\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase _EG.REL:\t/* release phase */\n\t\t\tif (!(eg_cnt&((1<<this.eg.sh.rr)-1))) {\n\t\t\t\t/* SSG EG type */\n\t\t\t\tif ((this.ssg&0x08)>0) {\n\t\t\t\t\t/* update attenuation level */\n\t\t\t\t\tif (this.volume<0x200) {\n\t\t\t\t\t\tthis.volume += _EG.inc[this.eg.sel.rr+((eg_cnt>>this.eg.sh.rr)&7)]<<2;\n\t\t\t\t\t\t/* check phase transition*/\n\t\t\t\t\t\tif (this.volume>=0x200) {\n\t\t\t\t\t\t\tthis.volume = _ENV.MAX_ATT_INDEX;\n\t\t\t\t\t\t\tthis.state = _EG.OFF;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t/* update attenuation level */\n\t\t\t\t\tthis.volume += (_EG.inc[this.eg.sel.rr+((eg_cnt>>this.eg.sh.rr)&7)]);\n\t\t\t\t\t/* check phase transition*/\n\t\t\t\t\tif (this.volume>=_ENV.MAX_ATT_INDEX) {\n\t\t\t\t\t\tthis.volume = _ENV.MAX_ATT_INDEX;\n\t\t\t\t\t\tthis.state = _EG.OFF;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.vol_out = this.tl+(this.volume|0);\t/* recalculate EG output */\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tif (cfg.strict) throw new Error(\"FM_SLOT::advance_eg - unsupported state (\"+this.state+\")\");\n\t\t\telse break;\n\t}\n};\nFM_CH.prototype.advance_eg = function(eg_cnt) {var j = this.SLOT.length; while (--j>-1) this.SLOT[j].advance_eg(eg_cnt);};\nfunction advance_eg_channels(x, eg_cnt) {var i = x.CH.length; while (--i>-1) x.CH[i].advance_eg(eg_cnt);}\n\n/* SSG-EG update process */\n/* The behavior is based upon Nemesis tests on real hardware */\n/* This is actually executed before each samples */\nFM_SLOT.prototype.update_ssg_eg = function() {\n\t/* detect SSG-EG transition */\n\t/* this is not required during release phase as the attenuation has been forced to MAX and output invert flag is not used */\n\t/* if an Attack Phase is programmed, inversion can occur on each sample */\n\tif ((this.ssg&0x08)>0&&this.volume>=0x200&&this.state>_EG.REL) {\n\t\tif ((this.ssg&0x01)>0) {\t/* bit 0 = hold SSG-EG */\n\t\t\tif ((this.ssg&0x02)>0) this.ssgn = 4;\t/* set inversion flag */\n\t\t\tif (this.state!==_EG.ATT&&!(this.ssgn^(this.ssg&0x04))) this.volume = _ENV.MAX_ATT_INDEX;\t/* force attenuation level during decay phases */\n\t\t}\n\t\telse {\t/* loop SSG-EG */\n\t\t\t/* toggle output inversion flag or reset Phase Generator */\n\t\t\tif ((this.ssg&0x02)>0) this.ssgn ^= 4;\n\t\t\telse this.phase = 0;\n\t\t\t/* same as Key ON */\n\t\t\tif (this.state!==_EG.ATT) {\n\t\t\t\tif ((this.rate.ar+this.rate.ksr)<94)\t/*32+62*/\n\t\t\t\t\tthis.state = (this.volume<=_ENV.MIN_ATT_INDEX)?\n\t\t\t\t\t\t(this.sl===_ENV.MIN_ATT_INDEX?_EG.SUS:_EG.DEC):\n\t\t\t\t\t\t_EG.ATT;\n\t\t\t\telse {\t/* Attack Rate is maximal: directly switch to Decay or Sustain */\n\t\t\t\t\tthis.volume = _ENV.MIN_ATT_INDEX;\n\t\t\t\t\tthis.state = (this.sl===_ENV.MIN_ATT_INDEX)?_EG.SUS:_EG.DEC;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t/* recalculate EG output */\n\t\tif ((this.ssgn^(this.ssg&0x04))>0) this.vol_out = this.tl+(((0x200-this.volume)|0)&_ENV.MAX_ATT_INDEX);\n\t\telse this.vol_out = this.tl+(this.volume|0);\n\t}\n};\nFM_CH.prototype.update_ssg_eg = function() {var j = this.SLOT.length; while (--j>-1) this.SLOT[j].update_ssg_eg();};\nfunction update_ssg_eg_channels(x) {var i = x.CH.length; while (--i>-1) x.CH[i].update_ssg_eg();}\n\nFM_SLOT.prototype.update_phase_lfo = function(x, pms, block_fnum) {\n\tvar off = LFO.pm_table[(((block_fnum&0x7f0)>>4)<<8)+pms+x.OPN.lfo.PM];\n\tif (off) {\t/* LFO phase modulation active */\n\t\tif (this.DT<0) {\n\t\t\tconsole.log(\"FM_SLOT::update_phase_lfo - invalid DT\",this.DT);\n\t\t\tif (cfg.strict) throw new Error(\"FM_SLOT::update_phase_lfo - invalid DT=\"+this.DT);\n\t\t\telse return;\n\t\t}\n\t\tvar blk, kc, fc;\n\t\t/* there are 2048 FNUMs that can be generated using FNUM/BLK registers\n\t\t      but LFO works with one more bit of a precision so we really need 4096 elements */\n\t\tblock_fnum = off+(block_fnum<<1);\n\t\tblk = (block_fnum&0x7000)>>12;\n\t\tblock_fnum = block_fnum&0xfff;\n\t\tkc = (blk<<2)|OPN.fktable[block_fnum>>8];\t/* keyscale code */\n\t\t/* (frequency) phase increment counter */\n\t\tif (cfg.mode) {\t// vb\n\t\t\tfc = ((x.OPN.fn.table[block_fnum]>>(7-blk))+x.OPN.ST.dt_tab[this.DT][kc]);\n\t\t\tif (fc<0) fc += x.OPN.fn.max;\t/* (frequency) phase overflow (credits to Nemesis) */\n\t\t}\n\t\telse fc = (((block_fnum<<5)>>(7-blk))+x.OPN.ST.dt_tab[this.DT][kc])&_DT.MASK;\t// gpgx\n\t\tthis.phase +=(fc*this.rate.mul)>>1;\t/* update phase */\n\t}\n\telse this.phase += this.Incr;\t/* LFO phase modulation  = zero */\n};\nFM_SLOT.prototype.update_phase_lfo_precalc = function(x, fc, kc) {\n\tif (fc!==-1) {\n\t\tvar finc;\n\t\tif (cfg.mode) {\t// vb\n\t\t\tfinc = (fc+x.OPN.ST.dt_tab[this.DT][kc]);\n\t\t\tif (finc<0) finc += x.OPN.fn.max;\t/* (frequency) phase overflow (credits to Nemesis) */\n\t\t}\n\t\telse finc = (fc+x.OPN.ST.dt_tab[this.DT][kc])&_DT.MASK;\t// gpgx\n\t\tthis.phase += (finc*this.rate.mul)>>1;\t/* update phase */\n\t}\n\telse this.phase += this.Incr;\n};\nFM_CH.prototype.update_phase_lfo = function(x) {\n\tvar pms = this.pms, block_fnum = this.block_fnum;\n\t//var i = this.SLOT.length; while (--i>-1) this.SLOT[i].update_phase_lfo(x, pms, block_fnum);\n\tvar blk, kc, fc;\n\tvar off = LFO.pm_table[(((block_fnum&0x7f0)>>4)<<8)+pms+x.OPN.lfo.PM];\n\tif (off) {\n\t\tblock_fnum = off+(block_fnum<<1);\n\t\tblk = (block_fnum&0x7000)>>12;\n\t\tblock_fnum = block_fnum&0xfff;\n\t\tkc = (blk<<2)|OPN.fktable[block_fnum>>8];\t/* keyscale code */\n\t\tif (cfg.mode) {\t// vb\n\t\t\tfc = (x.OPN.fn.table[block_fnum]>>(7-blk));\n\t\t}\n\t\telse fc = ((block_fnum<<5)>>(7-blk));\n\t}\n\telse {\n\t\tfc = -1;\n\t}\n\tvar i = this.SLOT.length; while (--i>-1) this.SLOT[_SLOT[i]].update_phase_lfo_precalc(x, fc, kc);\n}\n\n/* update phase increment and envelope generator */\nFM_SLOT.prototype.refresh_fc_eg = function(x, fc, kc) {\n\tif (this.DT<0) {\n\t\tconsole.log(\"FM_SLOT::refresh_fc_eg - invalid DT\",this.DT);\n\t\tif (cfg.strict) throw new Error(\"FM_SLOT::refresh_fc_eg - invalid DT=\"+this.DT);\n\t\telse return;\n\t}\n\tif (cfg.debug>1) console.log(\"OPN.ST.dt_tab[\"+this.DT+\"][\"+kc+\"]\",x.OPN.ST.dt_tab[this.DT][kc]);\n\tfc += x.OPN.ST.dt_tab[this.DT][kc];\t/* add detune value */\n\t/* (frequency) phase overflow (credits to Nemesis) */\n\tif (cfg.mode) {if (fc<0) fc += x.OPN.fn.max;}\t// vb\n\telse fc &= _DT.MASK;\t// gpgx\n\tthis.Incr = (fc*this.rate.mul)>>1;\t/* (frequency) phase increment counter */\n\tkc = kc>>this.KSR;\t/* ksr */\n\tif (this.rate.ksr!==kc) {\n\t\tthis.rate.ksr = kc;\n\t\tvar q = (this.rate.ar+kc)|0;\n\t\tif ((q)<94) {\t/*32+62*/\t/* recalculate envelope generator rates */\n\t\t\tthis.eg.sh.ar = _EG.rate_shift[q];\n\t\t\tthis.eg.sel.ar = _EG.rate_select[q];\n\t\t}\n\t\telse {\t/* verified by Nemesis on real hardware (Attack phase is blocked) */\n\t\t\tthis.eg.sh.ar = 0;\n\t\t\tthis.eg.sel.ar = 18*_EG.RATE_STEPS;\n\t\t}\n\t\tq = (this.rate.d1r+kc)|0;\n\t\tthis.eg.sh.d1r = _EG.rate_shift[q];\n\t\tthis.eg.sel.d1r = _EG.rate_select[q];\n\t\tq = (this.rate.d2r+kc)|0;\n\t\tthis.eg.sh.d2r = _EG.rate_shift[q];\n\t\tthis.eg.sel.d2r = _EG.rate_select[q];\n\t\tq = (this.rate.rr+kc)|0;\n\t\tthis.eg.sh.rr = _EG.rate_shift[q];\n\t\tthis.eg.sel.rr = _EG.rate_select[q];\n\t}\n};\n/* update phase increment counters */\nFM_CH.prototype.refresh_fc_eg = function(x) {\n\tif (this.SLOT[_SLOT[0]].Incr===-1) {\n\t\tvar fc = this.fc|0, kc = this.kcode|0;\n\t\tif (cfg.debug>1) console.log(\"FM_CH::refresh_fc_eg\",fc,kc);\n\t\tvar i = this.SLOT.length; while (--i>-1) this.SLOT[_SLOT[i]].refresh_fc_eg(x, fc, kc);\n\t}\n};\n\nFM_SLOT.prototype.calcVol = function(AM){return (this.vol_out+(AM&this.AMmask))|0;};\n\nvar op_calc;\nif (cfg.mode) op_calc = function(phase, env, pm, fb) {\t// vb\n\tvar p = (env<<3)+_YM.sin[\n\t\t(((phase&~_YM.FREQ_MASK)+(fb?pm:pm<<15))>>_YM.FREQ_SH)&_SIN.MASK\n\t];\n\tif (p>=_TL.TAB_LEN) return 0;\n\treturn _TL.tab[p];\n};\nelse op_calc = function(phase, env, pm, fb) {\t// gpgx\n\tvar p = (env<<3)+_YM.sin[(fb?(phase+pm)>>_SIN.BITS:(phase>>_SIN.BITS)+(pm>>1))&_SIN.MASK];\n\tif (p>=_TL.TAB_LEN) return 0;\n\treturn _TL.tab[p];\n};\n\nFM_SLOT.prototype.calculate = function(inp, am, asFB) {\n\tvar eg_out = (this.vol_out+(am&this.AMmask))|0,//this.calcVol(am),\t// inline FM_SLOT.calcVol(am) for speed\n\t\tval = 0;\n\tif (asFB) {\n\t\tvar o = (this.out[0]+this.out[1])|0;\n\t\tthis.out[0] = this.out[1]|0;\n\t\tval = this.out[0]|0;\n\t\tif (eg_out<_ENV.QUIET) {\n\t\t\tif (!inp) o = 0;\n\t\t\tthis.out[1] = op_calc(this.phase, eg_out, (o<<inp), 1);\n\t\t}\n\t\telse this.out[1] = 0;\n\t}\n\telse if (eg_out<_ENV.QUIET) {\n\t\tthis.out[0] = op_calc(this.phase, eg_out, inp, 0);\n\t\tval = this.out[0]|0;\n\t}\n\telse val = this.out[0] = 0;\n\treturn val;\n};\nFM_CH.prototype.calculate = function(x) {\n\tvar msg = \"\", msg_out = (cfg.debug>1&&cfg.maxcalc>0);\n\tvar AM = x.OPN.lfo.AM>>this.ams;\n\t//if (this.muted) return;\n\tvar eg_out, val;\n\tvar i, outs = ['x','c1','m2','c2'];\n\tthis.outputs.m2 = 0, this.outputs.c1 = 0, this.outputs.c2 = 0, this.outputs.mem = 0; this.outputs.x = 0;\n\tthis.outputs[this.mem.connect] = this.mem.value;\t/* restore delayed sample (MEM) value to m2 or c2 */\n\t//console.log(\"CH::calculate\",this.connect,this.mem);\n\t/* SLOT 1 */\n\ti = 0; val = this.SLOT[_SLOT[i]].calculate(this.FB, AM, 1);\n\tif (val!==0) {\n\t\tif (this.connect[i]==='x') this.outputs.x = val, this.outputs.mem = val, this.outputs.c1 = val, this.outputs.c2 = val;\t// algorithm 5\n\t\telse this.outputs[this.connect[i]] += val;\n\t}\n\t/* SLOT 3 */\n\ti = 2; val = this.SLOT[_SLOT[i]].calculate(this.outputs[outs[i]], AM, 0);\n\tif (val!==0) {\n\t\tif (this.connect[i]==='x') {}\n\t\telse this.outputs[this.connect[i]] += val;\n\t}\n\t/* SLOT 2 */\n\ti = 1; val = this.SLOT[_SLOT[i]].calculate(this.outputs[outs[i]], AM, 0);\n\tif (val!==0) {\n\t\tif (this.connect[i]==='x') {}\n\t\telse this.outputs[this.connect[i]] += val;\n\t}\n\t/* SLOT 4 */\n\ti = 3; val = this.SLOT[_SLOT[i]].calculate(this.outputs[outs[i]], AM, 0);\n\tif (val!==0) {\n\t\tif (this.connect[i]==='x') {}\n\t\telse this.outputs[this.connect[i]] += val;\n\t}\n\tthis.mem.value = this.outputs.mem|0;\t/* store current MEM */\n\tif (this.pms) {\t/* update phase counters AFTER output calculations */\n\t\tif ((x.OPN.ST.mode&0xC0)>0&&this.canCSM) {\t/* add support for 3 slot mode */\n\t\t\tthis.SLOT[_SLOT[0]].update_phase_lfo(x, this.pms, x.OPN.SL3.block_fnum[1]);\n\t\t\tthis.SLOT[_SLOT[1]].update_phase_lfo(x, this.pms, x.OPN.SL3.block_fnum[2]);\n\t\t\tthis.SLOT[_SLOT[2]].update_phase_lfo(x, this.pms, x.OPN.SL3.block_fnum[0]);\n\t\t\tthis.SLOT[_SLOT[3]].update_phase_lfo(x, this.pms, this.block_fnum);\n\t\t}\n\t\telse this.update_phase_lfo(x);\n\t}\n\telse {\t/* no LFO phase modulation */\n\t\tthis.SLOT[_SLOT[0]].phase += this.SLOT[_SLOT[0]].Incr;\n\t\tthis.SLOT[_SLOT[1]].phase += this.SLOT[_SLOT[1]].Incr;\n\t\tthis.SLOT[_SLOT[2]].phase += this.SLOT[_SLOT[2]].Incr;\n\t\tthis.SLOT[_SLOT[3]].phase += this.SLOT[_SLOT[3]].Incr;\n\t}\n\tif (msg_out)\n\t\tmsg += \"; m2=\"+this.outputs.m2+\";c1=\"+this.outputs.c1+\";c2=\"+this.outputs.c2+\";out=\"+this.outputs.out,\n\t\tconsole.log(\"FM_CH::calc\",this.ALGO,msg),\n\t\t--cfg.maxcalc;\n};\n\n/* write a OPN mode register 0x20-0x2f */\nOPN.WriteMode = function(x,r,v) {\n\tv = v&0xff;\n\tswitch (r) {\n\t\tcase 0x21: break;\t// test mode\n\t\tcase 0x22:\t/* LFO FREQ (YM2608/YM2610/YM2610B/ym2612) */\n\t\t\tif (v&8) {\t/* LFO enabled ? */\n\t\t\t\tif (cfg.mode) x.OPN.lfo.timer_overflow = LFO.samples_per_step[v&7]<<_YM.LFO_SH;\t// vb\n\t\t\t\telse x.OPN.lfo.timer_overflow = LFO.samples_per_step[v&7];\t// gpgx\n\t\t\t}\n\t\t\telse {\t/* hold LFO waveform in reset state */\n\t\t\t\tx.OPN.lfo.timer_overflow = 0;\n\t\t\t\tx.OPN.lfo.timer = 0;\n\t\t\t\tx.OPN.lfo.cnt = 0;\n\t\t\t\tx.OPN.lfo.AM = 126;\n\t\t\t\tx.OPN.lfo.PM = 0;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0x24:\t/* timer A High 8*/\n\t\t\tx.OPN.ST.TA = (x.OPN.ST.TA&0x03)|(((v)|0)<<2);\n\t\t\tx.OPN.ST.TAL = (1024-x.OPN.ST.TA);\n\t\t\tif (cfg.mode) x.OPN.ST.TAL <<= _YM.TIMER_SH;\t// vb\n\t\t\tbreak;\n\t\tcase 0x25:\t/* timer A Low 2*/\n\t\t\tx.OPN.ST.TA = (x.OPN.ST.TA&0x3fc)|(v&3);\n\t\t\tx.OPN.ST.TAL = (1024-x.OPN.ST.TA);\n\t\t\tif (cfg.mode) x.OPN.ST.TAL <<= _YM.TIMER_SH;\t// vb\n\t\t\tbreak;\n\t\tcase 0x26:\t/* timer B */\n\t\t\tx.OPN.ST.TB = v;\n\t\t\tif (cfg.mode) x.OPN.ST.TBL = (256-v)<<(_YM.TIMER_SH+4);\t// vb\n\t\t\telse x.OPN.ST.TBL = (256-v)<<4;\t// gpgx\n\t\t\tbreak;\n\t\tcase 0x27:\t/* mode, timer control */\n\t\t\tset_timers(x,v);\n\t\t\tbreak;\n\t\tcase 0x28:\t/* key on / off */\n\t\t\tvar c = v&0x03; if (c===3) break;\n\t\t\tif (v&0x04) c += 3;\t/* CH 4-6 */\n\t\t\t(function(ch){\n\t\t\t\tif (v&0x10) ch.keyOn(x,_SLOT[0]); else ch.keyOff(x,_SLOT[0]);\n\t\t\t\tif (v&0x20) ch.keyOn(x,_SLOT[1]); else ch.keyOff(x,_SLOT[1]);\n\t\t\t\tif (v&0x40) ch.keyOn(x,_SLOT[2]); else ch.keyOff(x,_SLOT[2]);\n\t\t\t\tif (v&0x80) ch.keyOn(x,_SLOT[3]); else ch.keyOff(x,_SLOT[3]);\n\t\t\t})(x.CH[c]);\n\t\t\tbreak;\n\t}\n};\n\n/* write a OPN register (0x30-0xff) */\nOPN.WriteReg = function(x,r,v) {\n\tv = v&0xff;\n\tvar c = OPN.CHAN(r),\n\t\tsl = OPN.SLOT(r);\n\tif (c>=3) {\t/* 0xX3,0xX7,0xXB,0xXF */\n\t\tif (cfg.strict) throw new Error(\"OPN_Write - unsupported channel \"+c+' or slot '+sl+' from {$'+r.toString(16)+',$'+v.toString(16)+'}');\t// 0x?3, 0x?7, 0x?B, 0x?F\n\t\telse return;\n\t}\n\tif (r>=0x100) c += 3;\n\tvar s = _SLOT[sl];\n\tswitch (r&0xf0) {\n\t\tcase 0x30:\t/* DET , MUL */\n\t\t\tx.CH[c].set_det_mul(x, sl, v);\n\t\t\tbreak;\n\t\tcase 0x40:\t/* TL */\n\t\t\tx.CH[c].set_tl(sl, v);\n\t\t\tbreak;\n\t\tcase 0x50:\t/* KS, AR */\n\t\t\tx.CH[c].set_ar_ksr(sl, v);\n\t\t\tbreak;\n\t\tcase 0x60:\t/* bit7 = AM ENABLE, DR */\n\t\t\tx.CH[c].set_dr(sl, v);\n\t\t\tx.CH[c].SLOT[sl].AMmask = (v&0x80)?~0:0;\n\t\t\tbreak;\n\t\tcase 0x70:\t/*     SR */\n\t\t\tx.CH[c].set_sr(sl, v);\n\t\t\tbreak;\n\t\tcase 0x80:\t/* SL, RR */\n\t\t\tx.CH[c].set_sl_rr(sl, v);\n\t\t\tbreak;\n\t\tcase 0x90:\t/* SSG-EG */\n\t\t\t(function(S){\n\t\t\t\tS.ssg = v&0x0f;\n\t\t\t\t/* recalculate EG output */\n\t\t\t\tif (S.state>_EG.REL) {\n\t\t\t\t\tif ((S.ssg&0x08)>0&&(S.ssgn^(S.ssg&0x04))>0)\n\t\t\t\t\t\tS.vol_out = S.tl+(((0x200-S.volume)|0)&_ENV.MAX_ATT_INDEX);\n\t\t\t\t\telse\n\t\t\t\t\t\tS.vol_out = S.tl+(S.volume|0);\n\t\t\t\t}\n\t\t\t})(x.CH[c].SLOT[sl]);\n\t\t\tbreak;\n\t\tcase 0xa0:\n\t\t\tvar fn, blk;\n\t\t\tswitch (sl) {\n\t\t\t\tcase 0:\t/* 0xa0-0xa2 : FNUM1 */\n\t\t\t\t\t//fn = ((x.OPN.ST.fn_h&7)<<8)+v;\t// old\n\t\t\t\t\t//blk = (x.OPN.ST.fn_h>>3)&0xff;\t// old\n\t\t\t\t\tfn = ((x.CH[c].fn_h&7)<<8)+v;\n\t\t\t\t\tblk = (x.CH[c].fn_h>>3)&0xff;\n\t\t\t\t\tx.CH[c].kcode = (blk<<2)|OPN.fktable[fn>>7];\t/* keyscale code */\n\t\t\t\t\t/* phase increment counter */\n\t\t\t\t\tif (cfg.mode) x.CH[c].fc = x.OPN.fn.table[fn<<1]>>(7-blk);\t// vb\n\t\t\t\t\telse x.CH[c].fc = (fn<<6)>>(7-blk);\t// gpgx\n\t\t\t\t\tx.CH[c].block_fnum = (blk<<11)|fn;\t/* store fnum in clear form for LFO PM calculations */\n\t\t\t\t\tx.CH[c].SLOT[_SLOT[0]].Incr = -1;\n\t\t\t\t\tif (cfg.debug>2) console.log('block_fnum=x',x.CH[c].block_fnum.toString(16),' kcode=',x.CH[c].kcode.toString(16),' fc=',x.CH[c].fc.toString(16));\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\t/* 0xa4-0xa6 : FNUM2,BLK */\n\t\t\t\t\t//x.OPN.ST.fn_h = (v&0x3f)|0;\t// old\n\t\t\t\t\tx.CH[c].fn_h = (v&0x3f)|0;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\t/* 0xa8-0xaa : 3CH FNUM1 */\n\t\t\t\t\tif (r<0x100) {\n\t\t\t\t\t\tfn = ((x.OPN.SL3.fn_h&7)<<8)+v;\n\t\t\t\t\t\tblk = x.OPN.SL3.fn_h>>3;\n\t\t\t\t\t\tx.OPN.SL3.kcode[c] = (blk<<2)|OPN.fktable[fn>>7];\t/* keyscale code */\n\t\t\t\t\t\t/* phase increment counter */\n\t\t\t\t\t\tif (cfg.mode) x.OPN.SL3.fc[c] = x.OPN.fn.table[fn<<1]>>(7-blk);\t// vb\n\t\t\t\t\t\telse x.OPN.SL3.fc[c] = (fn<<6)>>(7-blk);\t// gpgx\n\t\t\t\t\t\tx.OPN.SL3.block_fnum[c] = (blk<<11)|fn;\n\t\t\t\t\t\tx.CH[2].SLOT[_SLOT[0]].Incr = -1;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\t/* 0xac-0xae : 3CH FNUM2,BLK */\n\t\t\t\t\tif (r<0x100) x.OPN.SL3.fn_h = v&0x3f;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0xb0:\n\t\t\tswitch (sl) {\n\t\t\t\tcase 0:\t/* 0xb0-0xb2 : FB,ALGO */\n\t\t\t\t\tvar fb = (v>>3)&7;\n\t\t\t\t\tx.CH[c].ALGO = v&7;\n\t\t\t\t\tif (cfg.mode) x.CH[c].FB =  fb?fb+6:0;\t// vb\n\t\t\t\t\telse x.CH[c].FB =  fb;\t// gpgx\n\t\t\t\t\t//console.log(\"C[\",c,']=',x.CH[c].ALGO,','+x.CH[c].FB);\n\t\t\t\t\tx.CH[c].setupConnection();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\t/* 0xb4-0xb6 : L , R , AMS , PMS */\n\t\t\t\t\tx.CH[c].pms = (v&7)<<5;\t /* b0-2 PMS */ /* CH->pms = PM depth * 32 (index in lfo_pm_table) */\n\t\t\t\t\tx.CH[c].ams = LFO.ams_depth_shift[(v>>4)&0x03];\t/* b4-5 AMS */\n\t\t\t\t\t/* PAN :  b7 = L, b6 = R */\n\t\t\t\t\t// TODO: merge pan[] into FM_CH\n\t\t\t\t\tx.CH[c].pan[0] = v&0x80?_YM.bitmask:0;\t// new method\n\t\t\t\t\tx.CH[c].pan[1] = v&0x40?_YM.bitmask:0;\t// new method\n\t\t\t\t\t//x.OPN.pan[(c<<1)+0] = v&0x80?_YM.bitmask:0;\t// old method\n\t\t\t\t\t//x.OPN.pan[(c<<1)+1] = v&0x40?_YM.bitmask:0;\t// old method\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t}\n};\n\n\nfunction reset_channels(x, num) {if (num>x.CH.length) num = x.CH.length; while (--num>-1) x.CH[num].reset();}\n\n/* prescaler set (and make time tables) */\nOPN.SetPrescaler = function(x, r) {\n\tx.ratio = r||144;\n\tx.OPN.ST.scale = (x.OPN.ST.clock/x.OPN.ST.rate)/x.ratio;\n\tif (cfg.debug) console.log(\"init_timetables\",x.OPN.ST.clock,x.OPN.ST.rate,x.ratio,x.OPN.ST.scale);\n\t// init_timetables\n\tvar d, i, q;\n\tvar z = x.OPN.ST.scale*(1<<(_YM.FREQ_SH-10));\t/* -10 because chip works with 10.10 fixed point, while we use 16.16 */\t// vb\n\t/* build DETUNE table */\n\tfor (d=0; d<4; ++d) {\n\t\tfor (i=0; i<32; ++i) {\n\t\t\tq = _DT.tab[(d<<5)+i];\t// gpgx\n\t\t\tif (cfg.mode) q *= z;\t// vb\n\t\t\tx.OPN.ST.dt_tab[d][i] = q|0;\n\t\t\tx.OPN.ST.dt_tab[d+4][i] = -x.OPN.ST.dt_tab[d][i];\n\t\t}\n\t}\n\tif (cfg.debug>2) console.log(\"init_timetables dt_tab\",x.OPN.ST.dt_tab);\n\t/* there are 2048 FNUMs that can be generated using FNUM/BLK registers\n\t  but LFO works with one more bit of a precision so we really need 4096 elements */\n\t/* calculate fnumber -> increment counter table */\n\t/* freq table for octave 7 */\n\t/* OPN phase increment counter = 20bit */\n\t/* the correct formula is : F-Number = (144 * fnote * 2^20 / M) / 2^(B-1) */\n\t/* where sample clock is  M/144 */\n\t/* this means the increment value for one clock sample is FNUM * 2^(B-1) = FNUM * 64 for octave 7 */\n\t/* we also need to handle the ratio between the chip frequency and the emulated frequency (can be 1.0)  */\n\tq = 32.0*z, i = 4096; while (--i>-1) {x.OPN.fn.table[i] = (i*q)|0;}\t// vb\n\tx.OPN.fn.max = (0x20000*z)|0;\t/* maximal frequency is required for Phase overflow calculation, register size is 17 bits (Nemesis) */\t// vb\n\tx.OPN.eg.timer_add = (x.OPN.ST.scale*(1<<_YM.EG_SH))|0;\t// vb\n\tx.OPN.eg.timer_overflow = (3)*(1<<_YM.EG_SH);\t/* EG is updated every 3 samples */\t// vb\n\tx.OPN.lfo.timer_add = (x.OPN.ST.scale*(1<<_YM.LFO_SH))|0;\t/* LFO timer increment (every samples) */\t// vb\n\tx.OPN.ST.timer_base = (x.OPN.ST.scale*(1<<_YM.TIMER_SH))|0;\t/* Timers increment (every samples) */\t// vb\n};\n\n/* initialize generic tables */\nfunction init_tables(ym) {\n\tif (cfg.debug) console.log(\"init_tables\",ym.CH.length);\n\tvar d, i, x;\t// signed int\n\tvar n;\t// signed int\n\tvar o, m;\t// double\n\tvar q, z;\n\tvar PI = Math.PI, LOG = Math.log, POW = Math.pow, SIN = Math.sin;\n\t/* build Linear Power Table */\n\tvar tmp = (_ENV.STEP/32.0), sh = (1<<16), rl2 = _TL.RES_LEN<<1;\n\tfor (x=0; x<_TL.RES_LEN; ++x) {\n\t\tm = sh/POW(2, (x+1)*tmp);\n\t\t//m = m|0;\t// m = Math.floor(m);\t// extraneous, folded into next calculation +neo\n\t\t/* we never reach (1<<16) here due to the (x+1) */\n\t\t/* result fits within 16 bits at maximum */\n\t\t//n = m|0;\t/* 16 bits here */\n\t\t//n >>= 4;\t/* 12 bits here */\n\t\tn = (m|0)>>4;\n\t\tif (n&1) n = (n>>1)+1;\t/* round to nearest */\n\t\telse n = n>>1;\n\t\t/* 11 bits here (rounded) */\n\t\tn <<= 2;\t/* 13 bits here (as in real chip) */\n\t\tz = x<<1;\t/* 14 bits (with sign bit) */\n\t\t_TL.tab[z+0] = n;\n\t\t_TL.tab[z+1] = -n;\n\t\t/* one entry in the 'Power' table use the following format, xxxxxyyyyyyyys with:            */\n\t\t/*        s = sign bit                                                                      */\n\t\t/* yyyyyyyy = 8-bits decimal part (0-TL_RES_LEN)                                            */\n\t\t/* xxxxx    = 5-bits integer 'shift' value (0-31) but, since Power table output is 13 bits, */\n\t\t/*            any value above 13 (included) would be discarded.                             */\n\t\tfor (i=1; i<13; ++i) {\n\t\t\tq = (z+0+i*rl2)|0;\n\t\t\t_TL.tab[q] = _TL.tab[z]>>i;\n\t\t\t_TL.tab[q+1] = -_TL.tab[q];\n\t\t}\n\t}\n\t//console.log(\"TL_TABLE\",_TL.tab.join(\", \"));\n\t/* build Logarithmic Sinus table */\n\tq = PI/_SIN.LEN, z = 8.0/LOG(2.0), tmp = 2.0*4/_ENV.STEP; for (i=0; i<_SIN.LEN; ++i) {\t/* non-standard sinus */\n\t\tm = SIN(((i<<1)+1.0)*q);\t/* checked against the real chip */\n\t\t/* we never reach zero here due to ((i*2)+1) */\n\t\t/* convert to 'decibels' */\n\t\tif (m>0.0) o = LOG(1.0/m)*z;\n\t\telse o = LOG(-1.0/m)*z;\n\t\t//o = o/(_ENV.STEP/4);\t// folded into next calculation +neo\n\t\tn = (o*tmp)|0; //n = (2.0*o)|0;\n\t\tif (n&1) n = (n>>1)+1;\t/* round to nearest */\n\t\telse n = n>>1;\n\t\t_YM.sin[i] = (n<<1)+(m>=0.0?0:1);\t/* 13-bits (8.5) value is formatted for above 'Power' table */\n\t}\n\t//console.log(\"SIN_TAB\",_YM.sin.join(\", \"));\n\t/* build LFO PM modulation table */\n\tfor (i=0; i<8; ++i) {\t/* 8 PM depths */\n\t\tfor (n=0; n<128; ++n) {\t/* 7 bits meaningful of F-NUMBER */\n\t\t\tfor (x=0; x<8; ++x) {\n\t\t\t\tz = 0;\n\t\t\t\tfor (o=0; o<7; ++o) {\t/* 7 bits */\n\t\t\t\t\tif ((n&(1<<o))>0) {\t/* only if bit \"bit_tmp\" is set */\n\t\t\t\t\t\tz += LFO.pm_output[(o<<3)+i][x];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t/* 32 steps for LFO PM (sinus) */\n\t\t\t\td = (n<<8)+(i<<5);\t// fnum*32*8 + i*32\n\t\t\t\tLFO.pm_table[d+x+0] = z;\n\t\t\t\tLFO.pm_table[d+(x^7)+8] = z;\n\t\t\t\tLFO.pm_table[d+x+16] = -z;\n\t\t\t\tLFO.pm_table[d+(x^7)+24] = -z;\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**** END FM DEFS ****/\n\n\n\n\nexport default YM2612;","import * as React from \"react\";\r\nimport { applyPreset, Presets } from \"./presets\";\r\nimport SynthContext from \"./synth\";\r\nimport YM2612 from \"./ym2612\";\r\n\r\nconst initializeSynthContext = (notifyUpdate: () => void): SynthContext => {\r\n    const synth = new SynthContext(\r\n        new YM2612(),\r\n        notifyUpdate\r\n    );\r\n\r\n    // applyPianoPreset(synth);\r\n    applyPreset(synth)(Presets.marbleBass);\r\n\r\n    return synth;\r\n}\r\n\r\nconst initializeWebAudioContext = (context: AudioContext, synth: SynthContext) => {\r\n    // I apologize, w3c...\r\n    const processor = context.createScriptProcessor()!;\r\n    \r\n    // TODO: Need to do this over an AudioWorklet... :/\r\n    processor.onaudioprocess = (e: AudioProcessingEvent) => {\r\n        const { outputBuffer } = e;\r\n    \r\n        const sample = synth.chip.update(outputBuffer.length);\r\n    \r\n        outputBuffer.copyToChannel(new Float32Array((sample[0] as unknown as number[]).map(a => a / 65356)), 0, 0);\r\n        outputBuffer.copyToChannel(new Float32Array((sample[1] as unknown as number[]).map(a => a / 65356)), 1, 0);\r\n    };\r\n    \r\n    processor.connect(context.destination);\r\n    \r\n    // Return 'teardown'.\r\n    return () => {\r\n        processor.disconnect(context.destination);\r\n        context.close();\r\n    }\r\n};\r\n\r\nexport const useSynth = (notifyUpdate: () => void): SynthContext => {\r\n    const synth = React.useMemo(() => initializeSynthContext(notifyUpdate), []);\r\n\r\n    React.useEffect(() => {\r\n        const context = new AudioContext();\r\n\r\n        return initializeWebAudioContext(context, synth);\r\n    }, [synth]);\r\n\r\n    return synth;\r\n};","import * as React from \"react\";\r\nimport * as Ch from \"@chakra-ui/react\"\r\n\r\nimport SynthContext, { MappedFlag, MappedNumber, Operator } from \"./synth\";\r\n\r\nconst maxValue = (bits: number) => Math.pow(2, bits) - 1;\r\n\r\nconst BoundNumber = (boundSynth: SynthContext) => (props: { name: string, field: (context: SynthContext) => MappedNumber}) => <>\r\n    <Ch.FormControl id={`synth-control-${props.name}`}>\r\n        <Ch.FormLabel>{props.name}</Ch.FormLabel>\r\n        <Ch.NumberInput \r\n            size=\"sm\"\r\n            id={`synth-control-num-${props.name}`} \r\n            value={props.field(boundSynth).get()} \r\n            min={0} \r\n            max={maxValue(props.field(boundSynth).bits())}\r\n            onChange={(_, n) => { props.field(boundSynth).set(n) }}>\r\n\r\n            <Ch.NumberInputField />\r\n            <Ch.NumberInputStepper>\r\n                <Ch.NumberIncrementStepper />\r\n                <Ch.NumberDecrementStepper />\r\n            </Ch.NumberInputStepper>\r\n        </Ch.NumberInput>\r\n    </Ch.FormControl>\r\n</>;\r\n\r\nconst BoundFlag = (boundSynth: SynthContext) => (props: { name: string, field: (context: SynthContext) => MappedFlag}) => <>\r\n    <Ch.FormControl id={`synth-control-${props.name}`}>\r\n        <Ch.FormLabel>{props.name}</Ch.FormLabel>\r\n        <Ch.Switch isChecked={props.field(boundSynth).get()} onChange={(e) => props.field(boundSynth).set(e.target.checked)}></Ch.Switch>\r\n    </Ch.FormControl>\r\n</>;\r\n\r\nexport const SynthComponent = (props: { context: SynthContext }) => {\r\n    const { context } = props;\r\n\r\n    const Number = React.useMemo(() => BoundNumber(context), [context]);\r\n    const Flag = React.useMemo(() => BoundFlag(context), [context]);\r\n\r\n    const OperatorFields = (props: { operator: number, operatorSelector: (s: SynthContext) => Operator }) => {\r\n        const num = (n: string) => <Number key={`${n}-${props.operator}`} name={n} field={(s) => ((props.operatorSelector(s) as any)[n] as any as MappedNumber)} />;\r\n        const bit = (n: string) => <Flag key={`${n}-${props.operator}`} name={n} field={(s) => ((props.operatorSelector(s) as any)[n] as any as MappedFlag)} />\r\n        return <>{[\r\n            num(\"Level\"),\r\n            num(\"Attack\"),\r\n            num(\"Decay\"),\r\n            num(\"Sustain\"),\r\n            num(\"Release\"),\r\n            num(\"SustainLevel\"),\r\n            num(\"Scaling\"),\r\n            num(\"Detune\"),\r\n            num(\"Multiple\"),\r\n            num(\"CustomEnvelope\"),\r\n            bit(\"CustomEnvelopeEnable\"),\r\n            bit(\"FmEnable\"),\r\n        ]}</>;\r\n    };\r\n\r\n    return <>\r\n        <Ch.Stack direction=\"row\">\r\n            <div>\r\n                <Ch.Heading size=\"xs\">Operator 1</Ch.Heading> \r\n                <OperatorFields operator={1} operatorSelector={(s) => s.ChannelOne.Operator1} />\r\n            </div>\r\n            <div>\r\n                <Ch.Heading size=\"xs\">Operator 2</Ch.Heading> \r\n                <OperatorFields operator={2} operatorSelector={(s) => s.ChannelOne.Operator2} />\r\n            </div>\r\n            <div>\r\n                <Ch.Heading size=\"xs\">Operator 3</Ch.Heading> \r\n                <OperatorFields operator={3} operatorSelector={(s) => s.ChannelOne.Operator3} />\r\n            </div>\r\n            <div>\r\n                <Ch.Heading size=\"xs\">Operator 4</Ch.Heading> \r\n                <OperatorFields operator={4} operatorSelector={(s) => s.ChannelOne.Operator4} />\r\n            </div>\r\n        <div>\r\n            <Ch.Heading size=\"xs\">Channel Params</Ch.Heading>\r\n            <Number name=\"Algorithm\" field={(s) => s.ChannelOne.Algorithm} />\r\n            <Number name=\"Feedback\" field={(s) => s.ChannelOne.Feedback} />\r\n            <Number name=\"AmplitudeModulationSensitivity\" field={(s) => s.ChannelOne.AmplitudeModulationSensitivity} />\r\n            <Number name=\"PhaseModulationSensitivity\" field={(s) => s.ChannelOne.PhaseModulationSensitivity} />\r\n            <Flag name=\"Left\" field={(s) => s.ChannelOne.Left} />\r\n            <Flag name=\"Right\" field={(s) => s.ChannelOne.Right} />\r\n\r\n            <Ch.Heading size=\"xs\">Operator Flags</Ch.Heading>\r\n            <Flag name=\"Operator1Enable\" field={(s) => s.OperatorS1Enable} />\r\n            <Flag name=\"Operator2Enable\" field={(s) => s.OperatorS2Enable} />\r\n            <Flag name=\"Operator3Enable\" field={(s) => s.OperatorS3Enable} />\r\n            <Flag name=\"Operator4Enable\" field={(s) => s.OperatorS4Enable} />\r\n\r\n            <Ch.Heading size=\"xs\">LFO</Ch.Heading>\r\n            <Flag name=\"LfoEnable\" field={(s) => s.LfoEnable} />\r\n            <Number name=\"LfoFreq\" field={(s) => s.LfoFreq} />\r\n        </div>\r\n        </Ch.Stack>\r\n    </>;\r\n};","import * as React from \"react\";\r\n\r\nimport * as Ch from \"@chakra-ui/react\";\r\nimport SynthContext from \"./synth\";\r\n\r\nexport const PianoRoll = (props: { synth: SynthContext}) => {\r\n    const {synth} = props;\r\n\r\n    const [octave, setOctave] = React.useState(4);\r\n\r\n    const press = React.useCallback((f: number) => {\r\n        // Set Octave & key.\r\n        synth.ChannelOne.Octave.set(octave);\r\n        synth.ChannelOne.Frequency.set(f);\r\n        synth.Channel.set(0xF0);\r\n    }, [synth, octave]);\r\n\r\n    const release = React.useCallback(() => {\r\n        synth.Channel.set(0x00);\r\n    }, [synth]);\r\n\r\n    const note = {\r\n        \"A\": 617, \r\n        \"A#\": 653,\r\n        \"B\": 692,\r\n        \"C\": 733,\r\n        \"C#\": 777,\r\n        \"D\": 823,\r\n        \"D#\": 872,\r\n        \"E\": 924,\r\n        \"F\": 979,\r\n        \"F#\": 1037,\r\n        \"G\": 1099,\r\n        \"G#\": 1164,\r\n    };\r\n\r\n    return <Ch.Stack direction=\"row\">\r\n        <Ch.Button onMouseDown={() => press(note[\"A\"])} onMouseUp={release}>A</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"A#\"])} onMouseUp={release} colorScheme=\"blue\">A#</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"B\"])} onMouseUp={release}>B</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"C\"])} onMouseUp={release}>C</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"C#\"])} onMouseUp={release} colorScheme=\"blue\">C#</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"D\"])} onMouseUp={release}>D</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"D#\"])} onMouseUp={release} colorScheme=\"blue\">D#</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"E\"])} onMouseUp={release}>E</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"F\"])} onMouseUp={release}>F</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"F#\"])} onMouseUp={release} colorScheme=\"blue\">F#</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"G\"])} onMouseUp={release} >G</Ch.Button>\r\n        <Ch.Button onMouseDown={() => press(note[\"G#\"])} onMouseUp={release} colorScheme=\"blue\">G#</Ch.Button>\r\n        <Ch.Button colorScheme=\"green\" onClick={() => setOctave(p => p + 1)}>+</Ch.Button>\r\n        <Ch.Button colorScheme=\"green\" onClick={() => setOctave(p => p - 1)}>-</Ch.Button>\r\n    </Ch.Stack>;\r\n};","import * as React from \"react\";\n\nimport * as Ch from \"@chakra-ui/react\";\n\nimport './App.css';\nimport { useSynth } from \"./useSynth\";\nimport { SynthComponent } from \"./SynthComponent\";\nimport { PianoRoll } from \"./PianoRoll\";\n\n\n\nfunction App() {\n  // HACK: We bump 'key' here to force a redraw. \n  const [synthWrites, setSynthWrites] = React.useState(0);\n  const refreshSynthControl = () => {\n    setSynthWrites((p) => p + 1);\n  };\n\n  const synth = useSynth(refreshSynthControl);\n\n  return (\n    <Ch.ChakraProvider>\n      <Ch.CSSReset />\n      <Ch.Heading>Mini YM2612 Synth Demo</Ch.Heading>\n      <PianoRoll synth={synth} />\n      <SynthComponent key={synthWrites} context={synth} />\n      <Ch.Text>Based off of the <Ch.Link href=\"https://github.com/apollolux/ym2612-js\">ym2612-js</Ch.Link> library, and <Ch.Link href=\"https://www.smspower.org/maxim/Documents/YM2612/\">this reference sheet.</Ch.Link></Ch.Text>\n      <Ch.Text>still extremely a WIP...</Ch.Text>\n    </Ch.ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}